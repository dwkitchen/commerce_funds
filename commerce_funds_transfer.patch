From c146b7c322da888ee1216cc23b4e69e463c8edcf Mon Sep 17 00:00:00 2001
From: veso_83 <veso_83@abv.bg>
Date: Tue, 26 Nov 2013 14:29:09 +0000
Subject: [PATCH] Add the new files

---
 commerce_funds.info                                |  19 +
 commerce_funds.install                             | 125 ++++
 commerce_funds.module                              | 676 +++++++++++++++++++++
 commerce_funds.rules.inc                           |  69 +++
 ...nds_status_views_handler_filter_in_operator.inc | 418 +++++++++++++
 ...funds_type_views_handler_filter_in_operator.inc | 418 +++++++++++++
 includes/commerce_funds_account.controller.inc     |  35 ++
 includes/commerce_funds_transaction.controller.inc |  88 +++
 includes/views/commerce_funds.views.inc            | 286 +++++++++
 includes/views/commerce_funds.views_default.inc    | 141 +++++
 ...nds_status_views_handler_filter_in_operator.inc | 418 +++++++++++++
 ...funds_type_views_handler_filter_in_operator.inc | 418 +++++++++++++
 .../commerce_funds_deposit.info                    |  13 +
 .../commerce_funds_deposit.module                  | 207 +++++++
 .../commerce_funds_deposit.rules_defaults.inc      |  32 +
 .../commerce_funds_deposit.rules_defaults.inc      |  32 +
 .../commerce_funds_escrow.info                     |  13 +
 .../commerce_funds_escrow.module                   | 243 ++++++++
 .../commerce_funds_payment.info                    |   6 +
 .../commerce_funds_payment.module                  | 103 ++++
 .../commerce_funds_transfer.info                   |  14 +
 .../commerce_funds_transfer.module                 | 252 ++++++++
 .../commerce_funds_withdraw.info                   |  13 +
 .../commerce_funds_withdraw.install                |  72 +++
 .../commerce_funds_withdraw.module                 | 659 ++++++++++++++++++++
 .../views/commerce_funds_withdraw.views.inc        | 134 ++++
 26 files changed, 4904 insertions(+)
 create mode 100755 commerce_funds.info
 create mode 100755 commerce_funds.install
 create mode 100755 commerce_funds.module
 create mode 100755 commerce_funds.rules.inc
 create mode 100755 commerce_funds_status_views_handler_filter_in_operator.inc
 create mode 100755 commerce_funds_type_views_handler_filter_in_operator.inc
 create mode 100755 includes/commerce_funds_account.controller.inc
 create mode 100755 includes/commerce_funds_transaction.controller.inc
 create mode 100755 includes/views/commerce_funds.views.inc
 create mode 100755 includes/views/commerce_funds.views_default.inc
 create mode 100755 includes/views/handlers/commerce_funds_status_views_handler_filter_in_operator.inc
 create mode 100755 includes/views/handlers/commerce_funds_type_views_handler_filter_in_operator.inc
 create mode 100755 modules/commerce_funds_deposit/commerce_funds_deposit.info
 create mode 100755 modules/commerce_funds_deposit/commerce_funds_deposit.module
 create mode 100644 modules/commerce_funds_deposit/commerce_funds_deposit.rules_defaults.inc
 create mode 100644 modules/commerce_funds_deposit/includes/rules/commerce_funds_deposit.rules_defaults.inc
 create mode 100755 modules/commerce_funds_escrow/commerce_funds_escrow.info
 create mode 100755 modules/commerce_funds_escrow/commerce_funds_escrow.module
 create mode 100755 modules/commerce_funds_payment/commerce_funds_payment.info
 create mode 100755 modules/commerce_funds_payment/commerce_funds_payment.module
 create mode 100755 modules/commerce_funds_transfer/commerce_funds_transfer.info
 create mode 100755 modules/commerce_funds_transfer/commerce_funds_transfer.module
 create mode 100755 modules/commerce_funds_withdraw/commerce_funds_withdraw.info
 create mode 100755 modules/commerce_funds_withdraw/commerce_funds_withdraw.install
 create mode 100755 modules/commerce_funds_withdraw/commerce_funds_withdraw.module
 create mode 100755 modules/commerce_funds_withdraw/includes/views/commerce_funds_withdraw.views.inc

diff --git a/commerce_funds.info b/commerce_funds.info
new file mode 100755
index 0000000..31b6e2c
--- /dev/null
+++ b/commerce_funds.info
@@ -0,0 +1,19 @@
+name =  Commerce Funds
+description = Drupal funds management system
+core = 7.x
+
+dependencies[] = commerce_payment
+dependencies[] = rules
+
+
+; Module includes
+files[] = commerce_funds.rules.inc
+;files[] = commerce_funds.rules_defaults.inc
+files[] = includes/commerce_funds_transaction.controller.inc
+files[] = includes/commerce_funds_account.controller.inc
+
+; Views handlers
+files[] = includes/views/handlers/commerce_funds_type_views_handler_filter_in_operator.inc
+files[] = includes/views/handlers/commerce_funds_status_views_handler_filter_in_operator.inc
+
+package = Commerce Funds
\ No newline at end of file
diff --git a/commerce_funds.install b/commerce_funds.install
new file mode 100755
index 0000000..0fbd9cd
--- /dev/null
+++ b/commerce_funds.install
@@ -0,0 +1,125 @@
+<?php
+
+/**
+ * @file
+ * Install, and uninstall functions for the commerce_funds module.
+ */
+
+
+/**
+ * Implements hook_schema().
+ */
+function commerce_funds_schema() {
+  $schema['commerce_funds_account'] = array(
+    'description' => 'User Funds',
+    'fields' => array(
+      'account_id' => array(
+        'description' => 'The unique account id',
+        'type' => 'serial',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'uid' => array(
+        'description' => 'The user id for the account',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'balance' => array(
+        'description' => 'The balance of this account.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'currency_code' => array(
+        'description' => 'The currency code of this account.',
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+      ),
+    ),
+    'primary key' => array(
+      'account_id'
+    ),
+    'foreign keys' => array(
+      'uid' => array(
+        'table' => 'users',
+        'columns' => array('uid' => 'uid'),
+      ),
+    ),
+  );
+
+  $schema['commerce_funds_transaction'] = array(
+    'description' => 'Transactions',
+    'fields' => array(
+      'transaction_id' => array(
+        'description' => '',
+        'type' => 'serial',
+        'not null' => TRUE,
+      ),
+      'account_id' => array(
+        'description' => '',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'uid' => array(
+        'description' => '',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'reference' => array(
+        'description' => '',
+        'type' => 'int',
+        'not null' => FALSE,
+        'default' => 0,
+      ),
+      'created' => array(
+        'description' => 'The Unix timestamp when the card data was first stored.',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'amount' => array(
+        'description' => '',
+        'type' => 'int',
+        'not null' => TRUE,
+      ),
+      'currency_code' => array(
+        'description' => 'The currency code for the price.',
+        'type' => 'varchar',
+        'length' => 32,
+        'not null' => TRUE,
+      ),
+      'type' => array(
+        'type' => 'varchar',
+        'length' => 64,
+        'not null' => TRUE,
+        'description' => "",
+      ),
+      'notes' => array(
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => FALSE,
+        'description' => "",
+      ),
+    ),
+    'primary key' => array(
+      'transaction_id'
+    ),
+    'foreign keys' => array(
+      'uid' => array(
+        'table' => 'users',
+        'columns' => array('uid' => 'uid'),
+      ),
+      'account_id' => array(
+        'table' => 'commerce_funds_account',
+        'columns' => array('account_id' => 'account_id'),
+      ),
+    ),
+  );
+
+
+  return $schema;
+}
\ No newline at end of file
diff --git a/commerce_funds.module b/commerce_funds.module
new file mode 100755
index 0000000..61ede47
--- /dev/null
+++ b/commerce_funds.module
@@ -0,0 +1,676 @@
+<?php
+/**
+ * @file
+ *   commerce_funds.module
+ */
+
+/**
+ * Implements hook_views_api().
+ */
+function commerce_funds_views_api() {
+  return array(
+    'api' => 3,
+    'path' => drupal_get_path('module', 'commerce_funds') . '/includes/views',
+  );
+}
+
+
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_funds_menu() {
+
+  $items['admin/commerce/funds'] = array(
+    'title' => 'Funds Management',
+    'description' => 'Administer Store Funds',
+    'page callback' => 'system_admin_menu_block_page',
+    'access arguments' => array('access administration pages'),
+    'file path' => drupal_get_path('module', 'system'),
+    'file' => 'system.admin.inc',
+    'weight' => -15,
+  );
+
+  $items['admin/commerce/config/funds'] = array(
+    'title' => 'Funds',
+    'description' => 'Configure Funds Settings',
+    'page callback' => 'system_admin_menu_block_page',
+    'access arguments' => array('administer funds'),
+    'file path' => drupal_get_path('module', 'system'),
+    'file' => 'system.admin.inc',
+    'weight' => -15,
+  );
+
+  $items['admin/commerce/funds/configure/fees'] = array(
+    'title' => 'Fees',
+    'page callback' => 'commerce_funds_configure_fees',
+    'access arguments' => array('administer funds'),
+    'type' => MENU_NORMAL_ITEM,
+  );
+
+  //funds menu
+  $items['user/%user/funds'] = array(
+    'title' => 'Funds Account',
+    'type' => MENU_DEFAULT_LOCAL_TASK,
+  );
+
+  //deposit button
+  $items['user/%user/funds/deposit'] = array(
+    'title' => 'Deposit Funds',
+    'description' => 'Deposit Funds',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_deposit_funds_form', 1),
+    'access arguments' => array('deposit funds'),
+    'weight' => -25,
+    'type' => MENU_LOCAL_ACTION,
+    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
+    'file path' => drupal_get_path('module', 'commerce_funds_deposit'),
+    'file' => 'commerce_funds_deposit.module',
+  );
+
+  //button for transfer
+  $items['user/%user/funds/transfer'] = array(
+    'title' => 'Transfer Funds',
+    'description' => 'Transfer Funds',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_transfer_funds_form'),
+    'access arguments' => array('transfer funds'),
+    'weight' => -25,
+    'type' => MENU_LOCAL_ACTION,
+    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
+    'file path' => drupal_get_path('module', 'commerce_funds_transfer'),
+    'file' => 'commerce_funds_transfer.module',
+  );
+
+  return $items;
+}
+
+
+/**
+ * Implements hook_permission().
+ */
+function commerce_funds_permission() {
+  return array(
+    'view own transactions' => array(
+      'title' => 'View Own Transactions',
+      'description' => 'Allow users to view their transactions',
+    ),
+    'view transactions' => array(
+      'title' => 'View All Transactions',
+      'description' => 'Allow users to view all transactions',
+    ),
+    'administer funds' => array(
+      'title' => 'Administer Funds',
+      'description' => 'Gives users permission to administer all funds operations',
+      'restrict access' => TRUE,
+    ),
+  );
+}
+
+/**
+ * Implements hook_entity_info().
+ */
+function commerce_funds_entity_info() {
+  $data = array();
+
+  $data['commerce_funds_account'] = array(
+    'label' => t('Commerce Funds account'),
+    'controller class' => 'CommerceFundsAccountEntityController',
+    'base table' => 'commerce_funds_account',
+    'fieldable' => FALSE,
+
+    'entity keys' => array(
+      'id' => 'account_id',
+      'label' => 'account_id',
+    ),
+    'bundles' => array(),
+    'load hook' => 'commerce_funds_account_load',
+    'view modes' => array(
+      'full' => array(
+        'label' => t('Administrator'),
+        'custom settings' => FALSE,
+      ),
+    ),
+
+    'uri callback' => 'commerce_funds_account_uri',
+    'access callback' => 'commerce_funds_account',
+    'token type' => 'commerce-funds-account',
+    'metadata controller class' => '',
+
+    'permission labels' => array(
+      'singular' => t('funds account'),
+      'plural' => t('funds accounts'),
+    ),
+
+  );
+
+  $data['commerce_funds_transaction'] = array(
+    'label' => t('Commerce Funds transaction'),
+    'controller class' => 'CommerceFundsTransactionEntityController',
+    'base table' => 'commerce_funds_transaction',
+    'fieldable' => FALSE,
+    'entity keys' => array(
+      'id' => 'transaction_id',
+      'bundle' => 'type',
+      'label' => 'transaction_id',
+    ),
+    'bundle keys' => array(
+      'bundle' => 'type',
+    ),
+    'bundles' => array(
+      'credit' => array(
+        'label' => 'Credit',
+      ),
+      'debit' => array(
+        'label' => 'Debit',
+      ),
+    ),
+    'load hook' => 'commerce_funds_transaction_load',
+    'view modes' => array(
+      'administrator' => array(
+        'label' => t('Administrator'),
+        'custom settings' => FALSE,
+      ),
+    ),
+    'uri callback' => 'commerce_funds_transaction_uri',
+    'access callback' => 'commerce_funds_transaction_access',
+    'token type' => 'commerce-funds-transaction',
+    'metadata controller class' => '',
+    'permission labels' => array(
+      'singular' => t('funds transaction'),
+      'plural' => t('funds transactions'),
+    ),
+
+  );
+
+  return $data;
+}
+
+
+ /**
+  * Access callback for the entity API.
+  *
+  * @param $op
+  *   The operation being performed. One of 'view', 'update', 'create', 'delete'
+  *   or just 'edit' (being the same as 'create' or 'update').
+  * @param $profile
+  *   (optional) A profile to check access for. If nothing is given, access for
+  *   all profiles is determined.
+  * @param $account
+  *   (optional) The user to check for. Leave it to NULL to check for the global user.
+  *
+  * @return boolean
+  *   Whether access is allowed or not.
+  */
+  function commerce_funds_account($op, $profile = NULL, $account = NULL) {
+    return user_access('administer commerce_funds entities', $account);
+  }
+
+
+
+/**
+ * Returns an initialized funds account object.
+ *
+ * @return
+ *   A transaction object with all default fields initialized.
+ */
+function commerce_funds_account_new($account_user) {
+  return entity_get_controller('commerce_funds_account')->create(array(
+    'uid' => $account_user->uid,
+    'currency_code' => $account_user->currency_code,
+  ));
+}
+
+/**
+ * Saves a funds account.
+ *
+ * @param object $account
+ *   The full transaction object to save.
+ *
+ * @return
+ *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
+ */
+function commerce_funds_account_save($account) {
+  return entity_get_controller('commerce_funds_account')->save($account);
+}
+
+/**
+ * Loads a funds account by ID.
+ */
+function commerce_funds_account_load($account_id) {
+  $accounts = entity_load('commerce_funds_account', $account_id);
+  return $accounts ? reset($accounts) : FALSE;
+}
+
+/**
+ * Loads multiple funds accounts by ID or based on a set of matching conditions.
+ *
+ * @see entity_load()
+ */
+function commerce_funds_account_load_by_user($account_user, $currency_code, $reset = FALSE) {
+  $accounts =  entity_load('commerce_funds_account', array(), array('uid' => $account_user->uid, 'currency_code' => $currency_code), $reset);
+  return $accounts ? reset($accounts) : FALSE;
+}
+
+/**
+ * Returns an initialized payment transaction object.
+ *
+ * @param $method_id
+ *   The method_id of the payment method for the transaction.
+ *
+ * @return
+ *   A transaction object with all default fields initialized.
+ */
+function commerce_funds_transaction_new($type = '') {
+  return entity_get_controller('commerce_funds_transaction')->create(array(
+    'type' => $type,
+  ));
+}
+
+/**
+ * Saves a funds transaction.
+ *
+ * @param $transaction
+ *   The full transaction object to save.
+ *
+ * @return
+ *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
+ */
+function commerce_funds_transaction_save($transaction) {
+  return entity_get_controller('commerce_funds_transaction')->save($transaction);
+}
+
+/**
+ * Loads a funds transaction by ID.
+ */
+function commerce_funds_transaction_load($transaction_id) {
+  $transactions = commerce_funds_transaction_load_multiple(array($transaction_id), array());
+  return $transactions ? reset($transactions) : FALSE;
+}
+
+/**
+ * Loads multiple funds transaction by ID or based on a set of matching conditions.
+ *
+ * @see entity_load()
+ *
+ * @param $transaction_ids
+ *   An array of transaction IDs.
+ * @param $conditions
+ *   An array of conditions on the {commerce_payment_transaction} table in the
+ *     form 'field' => $value.
+ * @param $reset
+ *   Whether to reset the internal transaction loading cache.
+ *
+ * @return
+ *   An array of transaction objects indexed by transaction_id.
+ */
+function commerce_funds_transaction_load_multiple($transaction_ids = array(), $conditions = array(), $reset = FALSE) {
+  return entity_load('commerce_funds_transaction', $transaction_ids, $conditions, $reset);
+}
+
+ /**
+  * View callback
+  */
+  function commerce_funds_view($commerce_funds, $view_mode) {
+    return entity_view('commerce_funds', array($commerce_funds->id => $commerce_funds), $view_mode, NULL, TRUE);
+  }
+
+
+/**
+ * Deletes a funds transaction by ID.
+ *
+ * @param $transaction_id
+ *   The ID of the transaction to delete.
+ *
+ * @return
+ *   TRUE on success, FALSE otherwise.
+ */
+function commerce_funds_transaction_delete($transaction_id) {
+  return commerce_funds_transaction_delete_multiple(array($transaction_id));
+}
+
+/**
+ * Deletes multiple funds transactions by ID.
+ *
+ * @param $transaction_ids
+ *   An array of transaction IDs to delete.
+ *
+ * @return
+ *   TRUE on success, FALSE otherwise.
+ */
+function commerce_funds_transaction_delete_multiple($transaction_ids) {
+  return entity_get_controller('commerce_funds_transaction')->delete($transaction_ids);
+}
+
+
+/**
+ * Rules action to credit account balance
+ *
+ * @param object $account_user
+ *   User
+ * @param object $amount
+ *   Commerce Price
+ */
+function commerce_funds_credit($account_user, $amount) {
+
+  $account = commerce_funds_account_load_by_user($account_user, $amount['currency_code']);
+
+  if (empty($account)) {
+    $account = commerce_funds_account_new($account_user);
+    commerce_funds_account_save($account);
+  }
+
+
+
+  $account->balance += $amount['amount'];
+  $account->currency_code = $amount['currency_code'];
+
+  $transaction = commerce_funds_transaction_new('credit');
+  $transaction->account_id = $account->account_id;
+
+  $transaction->uid = $account_user->uid;
+  if (empty($amount['reference'])) {
+    $transaction->reference = $account_user->uid;
+  }
+  else {
+    $transaction->reference = $amount['reference'];
+  }
+  $transaction->amount = $amount['amount'];
+  $transaction->currency_code = $amount['currency_code'];
+
+  if (commerce_funds_transaction_save($transaction)) {
+    commerce_funds_account_save($account);
+  }
+
+}
+
+/**
+ * Rules action to debit account balance
+ *
+ * @param object $account_user
+ *   User
+ * @param object $amount
+ *   Commerce Price
+ */
+function commerce_funds_debit($account_user, $amount) {
+
+  $account = commerce_funds_account_load_by_user($account_user, $amount['currency_code']);
+
+  if (!$account) {
+    $account = commerce_funds_account_new($account_user);
+    commerce_funds_account_save($account);
+  }
+
+  $account->balance -= $amount['amount'];
+
+  $transaction = commerce_funds_transaction_new('debit');
+  $transaction->account_id = $account->account_id;
+  $transaction->amount = - $amount['amount'];
+  $transaction->type = 'debit';
+  $transaction->currency_code = $amount['currency_code'];
+
+  if (empty($amount['reference'])) {
+    $transaction->reference = $account_user->uid;
+  }
+  else {
+    $transaction->reference = $amount['reference'];
+  }
+
+    if (commerce_funds_transaction_save($transaction)) {
+
+      commerce_funds_account_save($account);
+    }
+
+}
+
+
+/**
+ * Displaies Transactions made of user's account
+ */
+function commerce_funds_view_transactions($form, &$form_state) {
+
+  $transactions = db_query("SELECT * FROM {commerce_funds_transactions}");
+
+  $types = array('Deposit', 'Transfer', 'Escrow Payment', 'Completed Escrow Payment', 'Cancelled Escrow Payment');
+
+  $header = array('Time', 'Type', 'User', 'Amount', 'Details');
+
+  $rows = array();
+
+  $saved_types = array();
+
+  if (array_key_exists('commerce_funds_filter_type', $_SESSION)) {
+    foreach ($_SESSION['commerce_funds_filter_type'] as $index) {
+      $saved_types[] = $types[$index];
+    }
+  }
+
+  foreach ($transactions as $transaction) {
+    if ((array_key_exists('commerce_funds_filter_type', $_SESSION) && in_array($transaction->type, $saved_types)) || !array_key_exists('commerce_funds_filter_type', $_SESSION)) {
+      $user = user_load($transaction->uid);
+      $to_user = $transaction->type == 'Transfer' ? user_load($transaction->reference) : array();
+      $rows[] = array(date('d/m/Y   g:i:s A', $transaction->created), $transaction->type, $user->mail, commerce_currency_format($transaction->amount, commerce_default_currency()), $transaction->type == 'Transfer' ? '<br />To: ' . $to_user->mail : '');
+    }
+  }
+
+  $form['filter_type'] = array(
+    '#type' => 'select',
+    '#title' => t('Type'),
+    '#options' => $types,
+    '#attributes' => array('multiple' => TRUE),
+    '#multiple' => TRUE,
+    '#size' => 5,
+    '#default_value' => array_key_exists('commerce_funds_filter_type', $_SESSION) ? $_SESSION['commerce_funds_filter_type'] : '',
+  );
+
+  $form['filter'] = array(
+    '#type' => 'submit',
+    '#value' => t('Filter'),
+  );
+
+  $form['reset'] = array(
+    '#type' => 'submit',
+    '#value' => t('Reset'),
+    '#suffix' => theme('table', array('header' => $header, 'rows' => $rows))
+  );
+
+  return $form;
+}
+
+/**
+ * Filter transactions
+ */
+function commerce_funds_view_transactions_submit($form, &$form_state) {
+  if ($form_state['values']['op'] == 'Filter') {
+    if (!empty($form_state['values']['filter_type']))
+      $_SESSION['commerce_funds_filter_type'] = $form_state['values']['filter_type']; else {
+      unset($_SESSION['commerce_funds_filter_type']);
+    }
+  }
+  elseif ($form_state['values']['op'] == 'Reset') {
+    unset($_SESSION['commerce_funds_filter_type']);
+  }
+
+  $form_state['redirect'] = 'admin/commerce/funds/view-transactions';
+}
+
+/**
+ * Configure funds fees
+ */
+function commerce_funds_configure_fees() {
+
+  $payment_methods = commerce_payment_methods();
+
+  $enabled_methods = array();
+
+  foreach ($payment_methods as $payment_method) {
+
+    $enabled_methods[] = $payment_method;
+  }
+
+  return drupal_get_form('commerce_funds_configure_fees_form', $enabled_methods);
+}
+
+
+/**
+ * Implements hook_form().
+ */
+function commerce_funds_configure_fees_form($form, &$form_state, $enabled_methods) {
+
+  $form['#enabledmethods'] = $enabled_methods;
+
+  $fees = variable_get('commerce_funds_fees', array());
+
+  $form['transfer'] = array(
+    '#type' => 'textfield',
+    '#title' => check_plain('Transfer Fee (%)'),
+    '#description' => check_plain('Fee taken on transfers'),
+    '#default_value' => array_key_exists('transfer', $fees) ? $fees['transfer'] : '0',
+    '#size' => 5,
+    '#maxlength' => 5,
+    '#required' => TRUE,
+  );
+
+  $form['transfer_fixed'] = array(
+    '#type' => 'textfield',
+    '#title' => check_plain('Fixed Transfer Fee (' . commerce_default_currency() . ')'),
+    '#description' => check_plain('Fixed fee taken on transfers'),
+    '#default_value' => array_key_exists('transfer_fixed', $fees) ? $fees['transfer_fixed'] / 100 : '0',
+    '#size' => 5,
+    '#maxlength' => 5,
+    '#required' => TRUE,
+  );
+
+  $form['escrow'] = array(
+    '#type' => 'textfield',
+    '#title' => check_plain('Escrow Fee (%)'),
+    '#description' => check_plain('Fee taken on escrows'),
+    '#default_value' => array_key_exists('escrow', $fees) ? $fees['escrow'] : '0',
+    '#size' => 5,
+    '#maxlength' => 5,
+    '#required' => TRUE,
+  );
+
+  $form['escrow_fixed'] = array(
+    '#type' => 'textfield',
+    '#title' => check_plain('Fixed Escrow Fee (' . commerce_default_currency() . ')'),
+    '#description' => check_plain('Fixed fee taken on escrows'),
+    '#default_value' => array_key_exists('escrow_fixed', $fees) ? $fees['escrow_fixed'] / 100 : '0',
+    '#size' => 5,
+    '#maxlength' => 5,
+    '#required' => TRUE,
+  );
+
+  $form['deposit'] = array(
+    '#type' => 'fieldset',
+    '#title' => check_plain('Deposit Fees'),
+    '#collapsible' => FALSE,
+  );
+
+  foreach ($enabled_methods as $method) {
+    $method_id = $method['method_id'];
+    $form['deposit'][$method_id] = array(
+      '#type' => 'textfield',
+      '#title' => check_plain($method['title'] . ' Fee (%)'),
+      '#description' => check_plain('Fee taken for Deposits made using ' . $method['title']),
+      '#default_value' => array_key_exists($method_id, $fees) ? $fees[$method_id] : '0',
+      '#size' => 5,
+      '#maxlength' => 5,
+      '#required' => TRUE,
+    );
+    $form['deposit'][$method_id . '_fixed'] = array(
+      '#type' => 'textfield',
+      '#title' => check_plain('Fixed ' . $method['title'] . ' Fee (' . commerce_default_currency() . ')'),
+      '#description' => check_plain('Fixed Fee taken for Deposits made using ' . $method['title']),
+      '#default_value' => array_key_exists($method_id . '_fixed', $fees) ? $fees[$method_id . '_fixed'] / 100 : '0',
+      '#size' => 5,
+      '#maxlength' => 5,
+      '#required' => TRUE,
+    );
+  }
+
+  $form['withdraw'] = array(
+    '#type' => 'fieldset',
+    '#title' => t('Withdrawal Fees'),
+    '#collapsible' => FALSE,
+  );
+
+  $enabled_methods = commerce_funds_get_enabled_withdrawal_methods();
+
+  foreach ($enabled_methods as $key => $method) {
+    $method_id = $key;
+    $form['withdraw'][$method_id] = array(
+      '#type' => 'textfield',
+      '#title' => check_plain($method . ' Fee (%)'),
+      '#description' => check_plain('Fee taken for Withdrawals made using ' . $method),
+      '#default_value' => array_key_exists($method_id, $fees) ? $fees[$method_id] : '0',
+      '#size' => 5,
+      '#maxlength' => 5,
+      '#required' => TRUE,
+    );
+    $form['withdraw'][$method_id . '_fixed'] = array(
+      '#type' => 'textfield',
+      '#title' => check_plain('Fixed ' . $method . ' Fee (' . commerce_default_currency() . ')'),
+      '#description' => check_plain('Fixed Fee taken for Withdrawals made using ' . $method),
+      '#default_value' => array_key_exists($method_id . '_fixed', $fees) ? $fees[$method_id . '_fixed'] / 100 : '0',
+      '#size' => 5,
+      '#maxlength' => 5,
+      '#required' => TRUE,
+    );
+  }
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+/**
+ * Validate fees
+ */
+function commerce_funds_configure_fees_form_validate($form, &$form_state) {
+
+  $enabled_methods = $form['#enabledmethods'];
+
+  foreach ($enabled_methods as $method) {
+    if (!is_numeric($form_state['values'][$method['method_id']])) {
+      form_set_error('amount', t('Value must be Numeric'));
+      return FALSE;
+    }
+  }
+}
+
+/**
+ * Sumbit the form.
+ */
+function commerce_funds_configure_fees_form_submit($form, &$form_state) {
+
+  $fees = array();
+
+  $fees['transfer'] = $form_state['values']['transfer'];
+  $fees['transfer_fixed'] = $form_state['values']['transfer_fixed'] * 100;
+  $fees['escrow'] = $form_state['values']['escrow'];
+  $fees['escrow_fixed'] = $form_state['values']['escrow_fixed'] * 100;
+
+  $enabled_methods = $form['#enabledmethods'];
+
+  foreach ($enabled_methods as $method) {
+    $method_id = $method['method_id'];
+    $fees[$method_id] = $form_state['values'][$method_id];
+    $fees[$method_id . '_fixed'] = $form_state['values'][$method_id . '_fixed'] * 100;
+  }
+
+  $enabled_methods = commerce_funds_get_enabled_withdrawal_methods();
+
+  foreach ($enabled_methods as $key => $method) {
+    $method_id = $key;
+    $fees[$method_id] = $form_state['values'][$method_id];
+    $fees[$method_id . '_fixed'] = $form_state['values'][$method_id . '_fixed'] * 100;
+  }
+
+  variable_set('commerce_funds_fees', $fees);
+}
+
+
diff --git a/commerce_funds.rules.inc b/commerce_funds.rules.inc
new file mode 100755
index 0000000..bc276a9
--- /dev/null
+++ b/commerce_funds.rules.inc
@@ -0,0 +1,69 @@
+<?php
+/**
+ * @file
+ *   commerce_funds.rules.inc
+ */
+
+/**
+ * Implements hook_rules_action_info().
+ */
+function commerce_funds_rules_action_info() {
+  $actions = array();
+/*
+  $actions['commerce_funds_update_balance'] = array(
+    'label' => t('Deposits funds into users account after the order is fully paid'),
+    'parameter' => array(
+      'account_user' => array(
+        'type' => 'user',
+        'label' => t('User'),
+      ),
+      'amount' => array(
+        'type' => 'commerce_price',
+        'label' => t('Commerce Order Amount'),
+      ),
+    ),
+    'group' => t('Commerce Funds'),
+    'callbacks' => array(
+      'execute' => 'commerce_funds_update_balance',
+    ),
+  );*/
+
+  $actions['commerce_funds_credit'] = array(
+    'label' => t('Credit user account balance'),
+    'parameter' => array(
+      'account_user' => array(
+        'type' => 'user',
+        'label' => t('User'),
+      ),
+      'amount' => array(
+        'type' => 'commerce_price',
+        'label' => t('Amount'),
+      ),
+    ),
+    'group' => t('Commerce Funds'),
+    'callbacks' => array(
+      'execute' => 'commerce_funds_credit',
+    ),
+  );
+
+  $actions['commerce_funds_debit'] = array(
+    'label' => t('Debit user account balance'),
+    'parameter' => array(
+      'account_user' => array(
+        'type' => 'user',
+        'label' => t('User'),
+      ),
+      'amount' => array(
+        'type' => 'commerce_price',
+        'label' => t('Amount'),
+      ),
+    ),
+    'group' => t('Commerce Funds'),
+    'callbacks' => array(
+      'execute' => 'commerce_funds_debit',
+    ),
+  );
+
+  return $actions;
+}
+
diff --git a/commerce_funds_status_views_handler_filter_in_operator.inc b/commerce_funds_status_views_handler_filter_in_operator.inc
new file mode 100755
index 0000000..d291369
--- /dev/null
+++ b/commerce_funds_status_views_handler_filter_in_operator.inc
@@ -0,0 +1,418 @@
+<?php
+/**
+ * Simple filter to handle matching of multiple options selectable via checkboxes
+ *
+ * Definition items:
+ * - options callback: The function to call in order to generate the value options. If omitted, the options 'Yes' and 'No' will be used.
+ * - options arguments: An array of arguments to pass to the options callback.
+ *
+ * @ingroup views_filter_handlers
+ */
+class commerce_funds_status_views_handler_filter_in_operator extends views_handler_filter_in_operator {
+  var $value_form_type = 'checkboxes';
+
+  /**
+   * @var array
+   * Stores all operations which are available on the form.
+   */
+  var $value_options = NULL;
+
+  function construct() {
+    parent::construct();
+    $this->value_title = t('Options');
+    $this->value_options = NULL;
+  }
+
+  /**
+   * Child classes should be used to override this function and set the
+   * 'value options', unless 'options callback' is defined as a valid function
+   * or static public method to generate these values.
+   *
+   * This can use a guard to be used to reduce database hits as much as
+   * possible.
+   *
+   * @return
+   *   Return the stored values in $this->value_options if someone expects it.
+   */
+  function get_value_options() {
+    if (isset($this->value_options)) {
+      return;
+    }
+
+    if (isset($this->definition['options callback']) && is_callable($this->definition['options callback'])) {
+      if (isset($this->definition['options arguments']) && is_array($this->definition['options arguments'])) {
+        $this->value_options = call_user_func_array($this->definition['options callback'], $this->definition['options arguments']);
+      }
+      else {
+        $this->value_options = call_user_func($this->definition['options callback']);
+      }
+    }
+    else {
+      $this->value_options = array('Pending Approval' => 'Pending Approval', 'Declined' => 'Declined');
+    }
+
+    return $this->value_options;
+    //return array(t('Deposite'), t('Transfer'));
+  }
+
+  function expose_options() {
+    parent::expose_options();
+    $this->options['expose']['reduce'] = FALSE;
+  }
+
+  function expose_form(&$form, &$form_state) {
+    parent::expose_form($form, $form_state);
+    $form['expose']['reduce'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Limit list to selected items'),
+      '#description' => t('If checked, the only items presented to the user will be the ones selected here.'),
+      '#default_value' => !empty($this->options['expose']['reduce']), // safety
+    );
+  }
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['operator']['default'] = 'in';
+    $options['value']['default'] = array();
+    $options['expose']['contains']['reduce'] = array('default' => FALSE);
+
+    return $options;
+  }
+
+  /**
+   * This kind of construct makes it relatively easy for a child class
+   * to add or remove functionality by overriding this function and
+   * adding/removing items from this array.
+   */
+  function operators() {
+    $operators = array(
+      'in' => array(
+        'title' => t('Is one of'),
+        'short' => t('in'),
+        'short_single' => t('='),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+      'not in' => array(
+        'title' => t('Is not one of'),
+        'short' => t('not in'),
+        'short_single' => t('<>'),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+    );
+    // if the definition allows for the empty operator, add it.
+    if (!empty($this->definition['allow empty'])) {
+      $operators += array(
+        'empty' => array(
+          'title' => t('Is empty (NULL)'),
+          'method' => 'op_empty',
+          'short' => t('empty'),
+          'values' => 0,
+        ),
+        'not empty' => array(
+          'title' => t('Is not empty (NOT NULL)'),
+          'method' => 'op_empty',
+          'short' => t('not empty'),
+          'values' => 0,
+        ),
+      );
+    }
+
+    return $operators;
+  }
+
+  /**
+   * Build strings from the operators() for 'select' options
+   */
+  function operator_options($which = 'title') {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      $options[$id] = $info[$which];
+    }
+
+    return $options;
+  }
+
+  function operator_values($values = 1) {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      if (isset($info['values']) && $info['values'] == $values) {
+        $options[] = $id;
+      }
+    }
+
+    return $options;
+  }
+
+  function value_form(&$form, &$form_state) {
+    $form['value'] = array();
+    $options = array();
+
+    if (empty($form_state['exposed'])) {
+      // Add a select all option to the value form.
+      $options = array('all' => t('Select all'));
+    }
+
+    $this->get_value_options();
+    $options += $this->value_options;
+    $default_value = (array) $this->value;
+
+    $which = 'all';
+    if (!empty($form['operator'])) {
+      $source = ($form['operator']['#type'] == 'radios') ? 'radio:options[operator]' : 'edit-options-operator';
+    }
+    if (!empty($form_state['exposed'])) {
+      $identifier = $this->options['expose']['identifier'];
+
+      if (empty($this->options['expose']['use_operator']) || empty($this->options['expose']['operator_id'])) {
+        // exposed and locked.
+        $which = in_array($this->operator, $this->operator_values(1)) ? 'value' : 'none';
+      }
+      else {
+        $source = 'edit-' . drupal_html_id($this->options['expose']['operator_id']);
+      }
+
+      if (!empty($this->options['expose']['reduce'])) {
+        $options = $this->reduce_value_options();
+
+        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {
+          $default_value = array();
+        }
+      }
+
+      if (empty($this->options['expose']['multiple'])) {
+        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {
+          $default_value = 'All';
+        }
+        elseif (empty($default_value)) {
+          $keys = array_keys($options);
+          $default_value = array_shift($keys);
+        }
+        else {
+          $copy = $default_value;
+          $default_value = array_shift($copy);
+        }
+      }
+    }
+
+    if ($which == 'all' || $which == 'value') {
+      $form['value'] = array(
+        '#type' => $this->value_form_type,
+        '#title' => $this->value_title,
+        '#options' => $options,
+        '#default_value' => $default_value,
+        // These are only valid for 'select' type, but do no harm to checkboxes.
+        '#multiple' => TRUE,
+        '#size' => count($options) > 8 ? 8 : count($options),
+      );
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier])) {
+        $form_state['input'][$identifier] = $default_value;
+      }
+
+      if ($which == 'all') {
+        if (empty($form_state['exposed']) && (in_array($this->value_form_type, array('checkbox', 'checkboxes', 'radios', 'select')))) {
+          $form['value']['#prefix'] = '<div id="edit-options-value-wrapper">';
+          $form['value']['#suffix'] = '</div>';
+        }
+        $form['value']['#dependency'] = array($source => $this->operator_values(1));
+      }
+    }
+  }
+
+  /**
+   * When using exposed filters, we may be required to reduce the set.
+   */
+  function reduce_value_options($input = NULL) {
+    if (!isset($input)) {
+      $input = $this->value_options;
+    }
+
+    // Because options may be an array of strings, or an array of mixed arrays
+    // and strings (optgroups) or an array of objects, we have to
+    // step through and handle each one individually.
+    $options = array();
+    foreach ($input as $id => $option) {
+      if (is_array($option)) {
+        $options[$id] = $this->reduce_value_options($option);
+        continue;
+      }
+      elseif (is_object($option)) {
+        $keys = array_keys($option->option);
+        $key = array_shift($keys);
+        if (isset($this->options['value'][$key])) {
+          $options[$id] = $option;
+        }
+      }
+      elseif (isset($this->options['value'][$id])) {
+        $options[$id] = $option;
+      }
+    }
+    return $options;
+  }
+
+  function accept_exposed_input($input) {
+    // A very special override because the All state for this type of
+    // filter could have a default:
+    if (empty($this->options['exposed'])) {
+      return TRUE;
+    }
+
+    // If this is non-multiple and non-required, then this filter will
+    // participate, but using the default settings, *if* 'limit is true.
+    if (empty($this->options['expose']['multiple']) && empty($this->options['expose']['required']) && !empty($this->options['expose']['limit'])) {
+      $identifier = $this->options['expose']['identifier'];
+      if ($input[$identifier] == 'All') {
+        return TRUE;
+      }
+    }
+
+    return parent::accept_exposed_input($input);
+  }
+
+  function value_submit($form, &$form_state) {
+    // Drupal's FAPI system automatically puts '0' in for any checkbox that
+    // was not set, and the key to the checkbox if it is set.
+    // Unfortunately, this means that if the key to that checkbox is 0,
+    // we are unable to tell if that checkbox was set or not.
+
+    // Luckily, the '#value' on the checkboxes form actually contains
+    // *only* a list of checkboxes that were set, and we can use that
+    // instead.
+
+    $form_state['values']['options']['value'] = $form['value']['#value'];
+  }
+
+  function admin_summary() {
+    if (!empty($this->options['exposed'])) {
+      return t('exposed');
+    }
+    $info = $this->operators();
+
+    $this->get_value_options();
+
+    if (!is_array($this->value)) {
+      return;
+    }
+
+    $operator = check_plain($info[$this->operator]['short']);
+    $values = '';
+    if (in_array($this->operator, $this->operator_values(1))) {
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($this->value_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $values = t('Unknown');
+      }
+      else if (count($this->value) == 1) {
+        // If any, use the 'single' short name of the operator instead.
+        if (isset($info[$this->operator]['short_single'])) {
+          $operator = check_plain($info[$this->operator]['short_single']);
+        }
+
+        $keys = $this->value;
+        $value = array_shift($keys);
+        if (isset($this->value_options[$value])) {
+          $values = check_plain($this->value_options[$value]);
+        }
+        else {
+          $values = '';
+        }
+      }
+      else {
+        foreach ($this->value as $value) {
+          if ($values !== '') {
+            $values .= ', ';
+          }
+          if (drupal_strlen($values) > 8) {
+            $values .= '...';
+            break;
+          }
+          if (isset($this->value_options[$value])) {
+            $values .= check_plain($this->value_options[$value]);
+          }
+        }
+      }
+    }
+
+    return $operator . (($values !== '') ? ' ' . $values : '');
+  }
+
+  function query() {
+    $info = $this->operators();
+    if (!empty($info[$this->operator]['method'])) {
+      $this->{$info[$this->operator]['method']}();
+    }
+  }
+
+  function op_simple() {
+    if (empty($this->value)) {
+      return;
+    }
+    $this->ensure_my_table();
+
+    // We use array_values() because the checkboxes keep keys and that can cause
+    // array addition problems.
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", array_values($this->value), $this->operator);
+  }
+
+  function op_empty() {
+    $this->ensure_my_table();
+    if ($this->operator == 'empty') {
+      $operator = "IS NULL";
+    }
+    else {
+      $operator = "IS NOT NULL";
+    }
+
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", NULL, $operator);
+  }
+
+  function validate() {
+    $this->get_value_options();
+    $errors = array();
+
+    // If the operator is an operator which doesn't require a value, there is
+    // no need for additional validation.
+    if (in_array($this->operator, $this->operator_values(0))) {
+      return array();
+    }
+
+    if (!in_array($this->operator, $this->operator_values(1))) {
+      $errors[] = t('The operator is invalid on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+    }
+    if (is_array($this->value)) {
+      if (!isset($this->value_options)) {
+        // Don't validate if there are none value options provided, for example for special handlers.
+        return $errors;
+      }
+      if ($this->options['exposed'] && !$this->options['expose']['required'] && empty($this->value)) {
+        // Don't validate if the field is exposed and no default value is provided.
+        return $errors;
+      }
+
+      // Some filter_in_operator usage uses optgroups forms, so flatten it.
+      $flat_options = form_options_flatten($this->value_options, TRUE);
+
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($flat_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $errors[] = t('No valid values found on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+      }
+    }
+    elseif (!empty($this->value) && ($this->operator == 'in' || $this->operator == 'not in')) {
+      $errors[] = t('The value @value is not an array for @operator on filter: @filter', array('@value' => views_var_export($this->value), '@operator' => $this->operator, '@filter' => $this->ui_name(TRUE)));
+    }
+    return $errors;
+  }
+}
diff --git a/commerce_funds_type_views_handler_filter_in_operator.inc b/commerce_funds_type_views_handler_filter_in_operator.inc
new file mode 100755
index 0000000..5c6fba5
--- /dev/null
+++ b/commerce_funds_type_views_handler_filter_in_operator.inc
@@ -0,0 +1,418 @@
+<?php
+/**
+ * Simple filter to handle matching of multiple options selectable via checkboxes
+ *
+ * Definition items:
+ * - options callback: The function to call in order to generate the value options. If omitted, the options 'Yes' and 'No' will be used.
+ * - options arguments: An array of arguments to pass to the options callback.
+ *
+ * @ingroup views_filter_handlers
+ */
+class commerce_funds_type_views_handler_filter_in_operator extends views_handler_filter_in_operator {
+  var $value_form_type = 'checkboxes';
+
+  /**
+   * @var array
+   * Stores all operations which are available on the form.
+   */
+  var $value_options = NULL;
+
+  function construct() {
+    parent::construct();
+    $this->value_title = t('Options');
+    $this->value_options = NULL;
+  }
+
+  /**
+   * Child classes should be used to override this function and set the
+   * 'value options', unless 'options callback' is defined as a valid function
+   * or static public method to generate these values.
+   *
+   * This can use a guard to be used to reduce database hits as much as
+   * possible.
+   *
+   * @return
+   *   Return the stored values in $this->value_options if someone expects it.
+   */
+  function get_value_options() {
+    if (isset($this->value_options)) {
+      return;
+    }
+
+    if (isset($this->definition['options callback']) && is_callable($this->definition['options callback'])) {
+      if (isset($this->definition['options arguments']) && is_array($this->definition['options arguments'])) {
+        $this->value_options = call_user_func_array($this->definition['options callback'], $this->definition['options arguments']);
+      }
+      else {
+        $this->value_options = call_user_func($this->definition['options callback']);
+      }
+    }
+    else {
+      $this->value_options = array('Deposit' => 'Deposit', 'Transfer' => 'Transfer', 'Escrow Payment' => 'Escrow Payment', 'Completed Escrow Payment' => 'Completed Escrow Payment');
+    }
+
+    return $this->value_options;
+    //return array(t('Deposite'), t('Transfer'));
+  }
+
+  function expose_options() {
+    parent::expose_options();
+    $this->options['expose']['reduce'] = FALSE;
+  }
+
+  function expose_form(&$form, &$form_state) {
+    parent::expose_form($form, $form_state);
+    $form['expose']['reduce'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Limit list to selected items'),
+      '#description' => t('If checked, the only items presented to the user will be the ones selected here.'),
+      '#default_value' => !empty($this->options['expose']['reduce']), // safety
+    );
+  }
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['operator']['default'] = 'in';
+    $options['value']['default'] = array();
+    $options['expose']['contains']['reduce'] = array('default' => FALSE);
+
+    return $options;
+  }
+
+  /**
+   * This kind of construct makes it relatively easy for a child class
+   * to add or remove functionality by overriding this function and
+   * adding/removing items from this array.
+   */
+  function operators() {
+    $operators = array(
+      'in' => array(
+        'title' => t('Is one of'),
+        'short' => t('in'),
+        'short_single' => t('='),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+      'not in' => array(
+        'title' => t('Is not one of'),
+        'short' => t('not in'),
+        'short_single' => t('<>'),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+    );
+    // if the definition allows for the empty operator, add it.
+    if (!empty($this->definition['allow empty'])) {
+      $operators += array(
+        'empty' => array(
+          'title' => t('Is empty (NULL)'),
+          'method' => 'op_empty',
+          'short' => t('empty'),
+          'values' => 0,
+        ),
+        'not empty' => array(
+          'title' => t('Is not empty (NOT NULL)'),
+          'method' => 'op_empty',
+          'short' => t('not empty'),
+          'values' => 0,
+        ),
+      );
+    }
+
+    return $operators;
+  }
+
+  /**
+   * Build strings from the operators() for 'select' options
+   */
+  function operator_options($which = 'title') {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      $options[$id] = $info[$which];
+    }
+
+    return $options;
+  }
+
+  function operator_values($values = 1) {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      if (isset($info['values']) && $info['values'] == $values) {
+        $options[] = $id;
+      }
+    }
+
+    return $options;
+  }
+
+  function value_form(&$form, &$form_state) {
+    $form['value'] = array();
+    $options = array();
+
+    if (empty($form_state['exposed'])) {
+      // Add a select all option to the value form.
+      $options = array('all' => t('Select all'));
+    }
+
+    $this->get_value_options();
+    $options += $this->value_options;
+    $default_value = (array) $this->value;
+
+    $which = 'all';
+    if (!empty($form['operator'])) {
+      $source = ($form['operator']['#type'] == 'radios') ? 'radio:options[operator]' : 'edit-options-operator';
+    }
+    if (!empty($form_state['exposed'])) {
+      $identifier = $this->options['expose']['identifier'];
+
+      if (empty($this->options['expose']['use_operator']) || empty($this->options['expose']['operator_id'])) {
+        // exposed and locked.
+        $which = in_array($this->operator, $this->operator_values(1)) ? 'value' : 'none';
+      }
+      else {
+        $source = 'edit-' . drupal_html_id($this->options['expose']['operator_id']);
+      }
+
+      if (!empty($this->options['expose']['reduce'])) {
+        $options = $this->reduce_value_options();
+
+        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {
+          $default_value = array();
+        }
+      }
+
+      if (empty($this->options['expose']['multiple'])) {
+        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {
+          $default_value = 'All';
+        }
+        elseif (empty($default_value)) {
+          $keys = array_keys($options);
+          $default_value = array_shift($keys);
+        }
+        else {
+          $copy = $default_value;
+          $default_value = array_shift($copy);
+        }
+      }
+    }
+
+    if ($which == 'all' || $which == 'value') {
+      $form['value'] = array(
+        '#type' => $this->value_form_type,
+        '#title' => $this->value_title,
+        '#options' => $options,
+        '#default_value' => $default_value,
+        // These are only valid for 'select' type, but do no harm to checkboxes.
+        '#multiple' => TRUE,
+        '#size' => count($options) > 8 ? 8 : count($options),
+      );
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier])) {
+        $form_state['input'][$identifier] = $default_value;
+      }
+
+      if ($which == 'all') {
+        if (empty($form_state['exposed']) && (in_array($this->value_form_type, array('checkbox', 'checkboxes', 'radios', 'select')))) {
+          $form['value']['#prefix'] = '<div id="edit-options-value-wrapper">';
+          $form['value']['#suffix'] = '</div>';
+        }
+        $form['value']['#dependency'] = array($source => $this->operator_values(1));
+      }
+    }
+  }
+
+  /**
+   * When using exposed filters, we may be required to reduce the set.
+   */
+  function reduce_value_options($input = NULL) {
+    if (!isset($input)) {
+      $input = $this->value_options;
+    }
+
+    // Because options may be an array of strings, or an array of mixed arrays
+    // and strings (optgroups) or an array of objects, we have to
+    // step through and handle each one individually.
+    $options = array();
+    foreach ($input as $id => $option) {
+      if (is_array($option)) {
+        $options[$id] = $this->reduce_value_options($option);
+        continue;
+      }
+      elseif (is_object($option)) {
+        $keys = array_keys($option->option);
+        $key = array_shift($keys);
+        if (isset($this->options['value'][$key])) {
+          $options[$id] = $option;
+        }
+      }
+      elseif (isset($this->options['value'][$id])) {
+        $options[$id] = $option;
+      }
+    }
+    return $options;
+  }
+
+  function accept_exposed_input($input) {
+    // A very special override because the All state for this type of
+    // filter could have a default:
+    if (empty($this->options['exposed'])) {
+      return TRUE;
+    }
+
+    // If this is non-multiple and non-required, then this filter will
+    // participate, but using the default settings, *if* 'limit is true.
+    if (empty($this->options['expose']['multiple']) && empty($this->options['expose']['required']) && !empty($this->options['expose']['limit'])) {
+      $identifier = $this->options['expose']['identifier'];
+      if ($input[$identifier] == 'All') {
+        return TRUE;
+      }
+    }
+
+    return parent::accept_exposed_input($input);
+  }
+
+  function value_submit($form, &$form_state) {
+    // Drupal's FAPI system automatically puts '0' in for any checkbox that
+    // was not set, and the key to the checkbox if it is set.
+    // Unfortunately, this means that if the key to that checkbox is 0,
+    // we are unable to tell if that checkbox was set or not.
+
+    // Luckily, the '#value' on the checkboxes form actually contains
+    // *only* a list of checkboxes that were set, and we can use that
+    // instead.
+
+    $form_state['values']['options']['value'] = $form['value']['#value'];
+  }
+
+  function admin_summary() {
+    if (!empty($this->options['exposed'])) {
+      return t('exposed');
+    }
+    $info = $this->operators();
+
+    $this->get_value_options();
+
+    if (!is_array($this->value)) {
+      return;
+    }
+
+    $operator = check_plain($info[$this->operator]['short']);
+    $values = '';
+    if (in_array($this->operator, $this->operator_values(1))) {
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($this->value_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $values = t('Unknown');
+      }
+      else if (count($this->value) == 1) {
+        // If any, use the 'single' short name of the operator instead.
+        if (isset($info[$this->operator]['short_single'])) {
+          $operator = check_plain($info[$this->operator]['short_single']);
+        }
+
+        $keys = $this->value;
+        $value = array_shift($keys);
+        if (isset($this->value_options[$value])) {
+          $values = check_plain($this->value_options[$value]);
+        }
+        else {
+          $values = '';
+        }
+      }
+      else {
+        foreach ($this->value as $value) {
+          if ($values !== '') {
+            $values .= ', ';
+          }
+          if (drupal_strlen($values) > 8) {
+            $values .= '...';
+            break;
+          }
+          if (isset($this->value_options[$value])) {
+            $values .= check_plain($this->value_options[$value]);
+          }
+        }
+      }
+    }
+
+    return $operator . (($values !== '') ? ' ' . $values : '');
+  }
+
+  function query() {
+    $info = $this->operators();
+    if (!empty($info[$this->operator]['method'])) {
+      $this->{$info[$this->operator]['method']}();
+    }
+  }
+
+  function op_simple() {
+    if (empty($this->value)) {
+      return;
+    }
+    $this->ensure_my_table();
+
+    // We use array_values() because the checkboxes keep keys and that can cause
+    // array addition problems.
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", array_values($this->value), $this->operator);
+  }
+
+  function op_empty() {
+    $this->ensure_my_table();
+    if ($this->operator == 'empty') {
+      $operator = "IS NULL";
+    }
+    else {
+      $operator = "IS NOT NULL";
+    }
+
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", NULL, $operator);
+  }
+
+  function validate() {
+    $this->get_value_options();
+    $errors = array();
+
+    // If the operator is an operator which doesn't require a value, there is
+    // no need for additional validation.
+    if (in_array($this->operator, $this->operator_values(0))) {
+      return array();
+    }
+
+    if (!in_array($this->operator, $this->operator_values(1))) {
+      $errors[] = t('The operator is invalid on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+    }
+    if (is_array($this->value)) {
+      if (!isset($this->value_options)) {
+        // Don't validate if there are none value options provided, for example for special handlers.
+        return $errors;
+      }
+      if ($this->options['exposed'] && !$this->options['expose']['required'] && empty($this->value)) {
+        // Don't validate if the field is exposed and no default value is provided.
+        return $errors;
+      }
+
+      // Some filter_in_operator usage uses optgroups forms, so flatten it.
+      $flat_options = form_options_flatten($this->value_options, TRUE);
+
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($flat_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $errors[] = t('No valid values found on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+      }
+    }
+    elseif (!empty($this->value) && ($this->operator == 'in' || $this->operator == 'not in')) {
+      $errors[] = t('The value @value is not an array for @operator on filter: @filter', array('@value' => views_var_export($this->value), '@operator' => $this->operator, '@filter' => $this->ui_name(TRUE)));
+    }
+    return $errors;
+  }
+}
diff --git a/includes/commerce_funds_account.controller.inc b/includes/commerce_funds_account.controller.inc
new file mode 100755
index 0000000..7fe4711
--- /dev/null
+++ b/includes/commerce_funds_account.controller.inc
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * @file
+ * The controller for the payment transaction entity containing the CRUD operations.
+ */
+
+/**
+ * The controller class for payment transactions contains methods for the
+ * transaction CRUD operations. The load method is inherited from the default
+ * controller.
+ */
+class CommerceFundsAccountEntityController extends DrupalCommerceEntityController {
+
+  /**
+   * Create a default payment transaction.
+   *
+   * @param array $values
+   *   An array of values to set, keyed by property name.
+   *
+   * @return object
+   *   A funds account object with all default fields initialized.
+   */
+  public function create(array $values = array()) {
+
+    $values += array(
+      'account_id' => NULL,
+      'balance' => 0,
+      'currency_code' => variable_get('commerce_default_currency'),
+    );
+
+    return parent::create($values);
+  }
+
+}
diff --git a/includes/commerce_funds_transaction.controller.inc b/includes/commerce_funds_transaction.controller.inc
new file mode 100755
index 0000000..8d4a33e
--- /dev/null
+++ b/includes/commerce_funds_transaction.controller.inc
@@ -0,0 +1,88 @@
+<?php
+
+/**
+ * @file
+ * The controller for the payment transaction entity containing the CRUD operations.
+ */
+
+/**
+ * The controller class for payment transactions contains methods for the
+ * transaction CRUD operations. The load method is inherited from the default
+ * controller.
+ */
+class CommerceFundsTransactionEntityController extends DrupalCommerceEntityController {
+
+  /**
+   * Create a default payment transaction.
+   *
+   * @param array $values
+   *   An array of values to set, keyed by property name.
+   *
+   * @return
+   *   A payment transaction object with all default fields initialized.
+   */
+  public function create(array $values = array()) {
+    global $user;
+
+    $values += array(
+      'transaction_id' => NULL,
+      'account_id' => NULL,
+      'uid' => $user->uid,
+      'type' => '',
+      'reference' => '',
+      'notes' => '',
+      'amount' => 0,
+      'currency_code' => variable_get('commerce_default_currency'),
+      'created' => '',
+    );
+
+    return parent::create($values);
+  }
+
+  /**
+   * Saves a payment transaction.
+   *
+   * When saving a transaction without an ID, this function will create a new
+   * transaction at that time. Subsequent transactions that should be saved as
+   * new revisions should set $transaction->revision to TRUE and include a log
+   * string in $transaction->log.
+   *
+   * @param $transaction
+   *   The full transaction object to save.
+   * @param $transaction
+   *   An optional transaction object.
+   *
+   * @return
+   *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
+   */
+  public function save($transaction, DatabaseTransaction $db_transaction = NULL) {
+    if (!isset($db_transaction)) {
+      $db_transaction = db_transaction();
+      $started_transaction = TRUE;
+    }
+
+    try {
+      global $user;
+
+      // Determine if we will be inserting a new transaction.
+      $transaction->is_new = empty($transaction->transaction_id);
+
+      // Set the timestamp fields.
+      if (empty($transaction->created)) {
+        $transaction->created = REQUEST_TIME;
+      }
+
+      // Round the amount to ensure it's an integer for storage.
+      $transaction->amount = round($transaction->amount);
+
+      return parent::save($transaction, $db_transaction);
+    }
+    catch (Exception $e) {
+      if (!empty($started_transaction)) {
+        $db_transaction->rollback();
+        watchdog_exception($this->entityType, $e);
+      }
+      throw $e;
+    }
+  }
+}
diff --git a/includes/views/commerce_funds.views.inc b/includes/views/commerce_funds.views.inc
new file mode 100755
index 0000000..d14a284
--- /dev/null
+++ b/includes/views/commerce_funds.views.inc
@@ -0,0 +1,286 @@
+<?php
+/**
+ * @file
+ *   commerce_funds.views.inc
+ */
+
+/**
+ * Impliments hook_views_data().
+ */
+function commerce_funds_views_data() {
+  $data = array();
+
+  $data['commerce_funds_account']['table'] = array(
+    'group' => t("Commerce Funds"),
+    'title' => t("User Account"),
+    'help' => t(""),
+  );
+
+  $data['commerce_funds_account']['table']['base'] = array(
+    'field' => 'account_id',
+    'title' => 'Commerce Funds Account',
+    'help' => t(""),
+    'weight' => 10,
+  );
+
+  $data['commerce_funds_account']['table']['join']['users'] = array(
+    'left_field' => 'uid',
+    'field' => 'uid',
+  );
+
+  $data['commerce_funds_account']['account_id'] = array(
+    'title' => t('Funds Account'),
+    'help' => t('The Funds Account ID.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  // Expose the account uid.
+  $data['commerce_funds_account']['uid'] = array(
+    'title' => t('User'),
+    'help' => t("The account's user ID."),
+    'field' => array(
+      'handler' => 'views_handler_field_user',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_user_uid',
+      'name field' => 'name',
+    ),
+    'filter' => array(
+      'title' => t('Name'),
+      'handler' => 'views_handler_filter_user_name',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'relationship' => array(
+      'title' => t('Account'),
+      'help' => t("Relate this funds account to the user account"),
+      'handler' => 'views_handler_relationship',
+      'base' => 'users',
+      'base field' => 'uid',
+      'field' => 'uid',
+      'label' => t('User commerce funds account'),
+    ),
+  );
+
+  // Expose the account balance.
+  $data['commerce_funds_account']['balance'] = array(
+    'title' => t('Balance'),
+    'help' => t('The balance of the account.'),
+    'field' => array(
+      'handler' => 'commerce_payment_handler_field_amount',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_numeric',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_numeric',
+    ),
+  );
+
+  // Expose the account currency.
+  $data['commerce_funds_account']['currency_code'] = array(
+    'title' => t('Currency'),
+    'help' => t('The currency of the account.'),
+    'field' => array(
+      'handler' => 'commerce_payment_handler_field_currency_code',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'commerce_payment_handler_filter_currency_code',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+  $data['commerce_funds_transaction']['table'] = array(
+    'group' => t("Commerce Funds"),
+    'title' => t("Transactions"),
+    'help' => t(""),
+  );
+  $data['commerce_funds_transaction']['table']['base'] = array(
+    'field' => 'transaction_id',
+    'title' => 'Funds Transactions',
+    'help' => t(""),
+    'weight' => 10,
+  );
+
+  $data['commerce_funds_transaction']['uid'] = array(
+    'title' => t('User Uid'),
+    'help' => t('The User ID.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_user_uid',
+      'name field' => 'name',
+    ),
+    'filter' => array(
+      'title' => t('Name'),
+      'handler' => 'views_handler_filter_user_name',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'relationship' => array(
+      'title' => t('Transaction'),
+      'help' => t("Relate this funds transaction to the user account"),
+      'handler' => 'views_handler_relationship',
+      'base' => 'users',
+      'base field' => 'uid',
+      'field' => 'uid',
+      'label' => t('User commerce funds transaction'),
+    ),
+  );
+
+  $data['commerce_funds_transaction']['account_id'] = array(
+    'title' => t('Funds Account'),
+    'help' => t('The Funds Account ID.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'relationship' => array(
+      'title' => t('Transaction'),
+      'help' => t("Relate this funds transaction to the funds account"),
+      'handler' => 'views_handler_relationship',
+      'base' => 'commerce_funds_account',
+      'base field' => 'account_id',
+      'field' => 'account_id',
+      'label' => t('Funds account transaction'),
+    ),
+  );
+
+  $data['commerce_funds_transaction']['reference'] = array(
+    'title' => t('Special Reference data'),
+    'help' => t('In case of a transfer transaction this field will hold the user id of the destination user, same for escrow payment transactions.'),
+    'relationship' => array(
+      'base' => 'user',
+      'field' => 'uid',
+      'handler' => 'views_handler_relationship',
+      'label' => t('User Reference'),
+    ),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_user_current',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  $data['commerce_funds_transaction']['created'] = array(
+    'title' => t('Created On'),
+    'help' => t('Time of creation.'),
+    'field' => array(
+      'handler' => 'views_handler_field_date',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_field_date',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  $data['commerce_funds_transaction']['amount'] = array(
+    'title' => t('Transaction Amount'),
+    'help' => t('The transaction amount.'),
+    'field' => array(
+      'handler' => 'views_handler_field_numeric',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_numeric',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  // Expose the account currency.
+  $data['commerce_funds_transaction']['currency_code'] = array(
+    'title' => t('Currency'),
+    'help' => t('The currency of the transaction.'),
+    'field' => array(
+      'handler' => 'commerce_payment_handler_field_currency_code',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'commerce_payment_handler_filter_currency_code',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+  $data['commerce_funds_transaction']['type'] = array(
+    'title' => t('Transaction Type'),
+    'help' => t('The transaction type.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'filter' => array(
+      'handler' => 'commerce_funds_type_views_handler_filter_in_operator',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+  $data['commerce_funds_transaction']['notes'] = array(
+    'title' => t('Notes'),
+    'help' => t('Comments.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_string',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+  return $data;
+}
diff --git a/includes/views/commerce_funds.views_default.inc b/includes/views/commerce_funds.views_default.inc
new file mode 100755
index 0000000..07f37c7
--- /dev/null
+++ b/includes/views/commerce_funds.views_default.inc
@@ -0,0 +1,141 @@
+<?php
+
+
+/**
+ * Views for the default funds UI.
+ */
+
+/**
+ * Implements hook_views_default_views().
+ */
+function commerce_funds_views_default_views() {
+  $views = array();
+
+  $view = new view();
+  $view->name = 'commerce_funds_user_accounts';
+  $view->description = '';
+  $view->tag = 'Commerce Funds';
+  $view->base_table = 'commerce_funds_account';
+  $view->human_name = 'Commerce Funds: User Accounts';
+  $view->core = 7;
+  $view->api_version = '3.0';
+  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
+
+  /* Display: Master */
+  $handler = $view->new_display('default', 'Master', 'default');
+  $handler->display->display_options['title'] = 'Commerce Funds: User Accounts';
+  $handler->display->display_options['use_more_always'] = FALSE;
+  $handler->display->display_options['access']['type'] = 'perm';
+  $handler->display->display_options['access']['perm'] = 'view own transactions';
+  $handler->display->display_options['cache']['type'] = 'none';
+  $handler->display->display_options['query']['type'] = 'views_query';
+  $handler->display->display_options['exposed_form']['type'] = 'basic';
+  $handler->display->display_options['pager']['type'] = 'none';
+  $handler->display->display_options['style_plugin'] = 'table';
+  /* Field: Commerce Funds: Balance */
+  $handler->display->display_options['fields']['balance']['id'] = 'balance';
+  $handler->display->display_options['fields']['balance']['table'] = 'commerce_funds_account';
+  $handler->display->display_options['fields']['balance']['field'] = 'balance';
+  /* Field: Commerce Funds: Currency */
+  $handler->display->display_options['fields']['currency_code']['id'] = 'currency_code';
+  $handler->display->display_options['fields']['currency_code']['table'] = 'commerce_funds_account';
+  $handler->display->display_options['fields']['currency_code']['field'] = 'currency_code';
+  /* Field: Commerce Funds: Funds Account */
+  $handler->display->display_options['fields']['account_id']['id'] = 'account_id';
+  $handler->display->display_options['fields']['account_id']['table'] = 'commerce_funds_account';
+  $handler->display->display_options['fields']['account_id']['field'] = 'account_id';
+  $handler->display->display_options['fields']['account_id']['label'] = '';
+  $handler->display->display_options['fields']['account_id']['alter']['alter_text'] = TRUE;
+  $handler->display->display_options['fields']['account_id']['alter']['text'] = 'View transactions';
+  $handler->display->display_options['fields']['account_id']['alter']['make_link'] = TRUE;
+  $handler->display->display_options['fields']['account_id']['alter']['path'] = 'user/!1/funds/[account_id]/transactions';
+  $handler->display->display_options['fields']['account_id']['element_label_colon'] = FALSE;
+  /* Contextual filter: Commerce Funds: User */
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'commerce_funds_account';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'not found';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'fixed';
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+
+  /* Display: Page */
+  $handler = $view->new_display('page', 'Page', 'page');
+  $handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
+  $handler->display->display_options['path'] = 'user/%/funds';
+  $handler->display->display_options['menu']['type'] = 'tab';
+  $handler->display->display_options['menu']['title'] = 'Funds Account';
+  $handler->display->display_options['menu']['description'] = '30';
+  $handler->display->display_options['menu']['weight'] = '0';
+  $handler->display->display_options['menu']['context'] = 0;
+
+  $views[$view->name] = $view;
+
+  $view = new view();
+  $view->name = 'commerce_funds_user_transactions';
+  $view->description = '';
+  $view->tag = 'Commerce Funds';
+  $view->base_table = 'commerce_funds_transaction';
+  $view->human_name = 'Commerce Funds: User Transactions';
+  $view->core = 7;
+  $view->api_version = '3.0';
+  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
+
+  /* Display: Master */
+  $handler = $view->new_display('default', 'Master', 'default');
+  $handler->display->display_options['title'] = 'Commerce Funds: User Transactions';
+  $handler->display->display_options['use_more_always'] = FALSE;
+  $handler->display->display_options['access']['type'] = 'perm';
+  $handler->display->display_options['access']['perm'] = 'view own transactions';
+  $handler->display->display_options['cache']['type'] = 'none';
+  $handler->display->display_options['query']['type'] = 'views_query';
+  $handler->display->display_options['exposed_form']['type'] = 'basic';
+  $handler->display->display_options['pager']['type'] = 'full';
+  $handler->display->display_options['pager']['options']['items_per_page'] = '25';
+  $handler->display->display_options['style_plugin'] = 'table';
+  /* Field: Commerce Funds: Transaction Type */
+  $handler->display->display_options['fields']['type']['id'] = 'type';
+  $handler->display->display_options['fields']['type']['table'] = 'commerce_funds_transaction';
+  $handler->display->display_options['fields']['type']['field'] = 'type';
+  /* Field: Commerce Funds: Transaction Amount */
+  $handler->display->display_options['fields']['amount']['id'] = 'amount';
+  $handler->display->display_options['fields']['amount']['table'] = 'commerce_funds_transaction';
+  $handler->display->display_options['fields']['amount']['field'] = 'amount';
+  /* Field: Commerce Funds: Notes */
+  $handler->display->display_options['fields']['notes']['id'] = 'notes';
+  $handler->display->display_options['fields']['notes']['table'] = 'commerce_funds_transaction';
+  $handler->display->display_options['fields']['notes']['field'] = 'notes';
+  /* Contextual filter: Commerce Funds: User Uid */
+  $handler->display->display_options['arguments']['uid']['id'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['table'] = 'commerce_funds_transaction';
+  $handler->display->display_options['arguments']['uid']['field'] = 'uid';
+  $handler->display->display_options['arguments']['uid']['default_action'] = 'empty';
+  $handler->display->display_options['arguments']['uid']['default_argument_type'] = 'fixed';
+  $handler->display->display_options['arguments']['uid']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['uid']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['uid']['summary_options']['items_per_page'] = '25';
+  /* Contextual filter: Commerce Funds: Funds Account */
+  $handler->display->display_options['arguments']['account_id']['id'] = 'account_id';
+  $handler->display->display_options['arguments']['account_id']['table'] = 'commerce_funds_transaction';
+  $handler->display->display_options['arguments']['account_id']['field'] = 'account_id';
+  $handler->display->display_options['arguments']['account_id']['default_action'] = 'empty';
+  $handler->display->display_options['arguments']['account_id']['default_argument_type'] = 'fixed';
+  $handler->display->display_options['arguments']['account_id']['summary']['number_of_records'] = '0';
+  $handler->display->display_options['arguments']['account_id']['summary']['format'] = 'default_summary';
+  $handler->display->display_options['arguments']['account_id']['summary_options']['items_per_page'] = '25';
+
+  /* Display: Page */
+  $handler = $view->new_display('page', 'Page', 'page');
+  $handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
+  $handler->display->display_options['path'] = 'user/%/funds/%/transactions';
+  $handler->display->display_options['menu']['title'] = 'Transactions';
+  $handler->display->display_options['menu']['weight'] = '0';
+  $handler->display->display_options['menu']['context'] = 0;
+  $handler->display->display_options['tab_options']['weight'] = '0';
+
+  $views[$view->name] = $view;
+
+  return $views;
+
+}
diff --git a/includes/views/handlers/commerce_funds_status_views_handler_filter_in_operator.inc b/includes/views/handlers/commerce_funds_status_views_handler_filter_in_operator.inc
new file mode 100755
index 0000000..d291369
--- /dev/null
+++ b/includes/views/handlers/commerce_funds_status_views_handler_filter_in_operator.inc
@@ -0,0 +1,418 @@
+<?php
+/**
+ * Simple filter to handle matching of multiple options selectable via checkboxes
+ *
+ * Definition items:
+ * - options callback: The function to call in order to generate the value options. If omitted, the options 'Yes' and 'No' will be used.
+ * - options arguments: An array of arguments to pass to the options callback.
+ *
+ * @ingroup views_filter_handlers
+ */
+class commerce_funds_status_views_handler_filter_in_operator extends views_handler_filter_in_operator {
+  var $value_form_type = 'checkboxes';
+
+  /**
+   * @var array
+   * Stores all operations which are available on the form.
+   */
+  var $value_options = NULL;
+
+  function construct() {
+    parent::construct();
+    $this->value_title = t('Options');
+    $this->value_options = NULL;
+  }
+
+  /**
+   * Child classes should be used to override this function and set the
+   * 'value options', unless 'options callback' is defined as a valid function
+   * or static public method to generate these values.
+   *
+   * This can use a guard to be used to reduce database hits as much as
+   * possible.
+   *
+   * @return
+   *   Return the stored values in $this->value_options if someone expects it.
+   */
+  function get_value_options() {
+    if (isset($this->value_options)) {
+      return;
+    }
+
+    if (isset($this->definition['options callback']) && is_callable($this->definition['options callback'])) {
+      if (isset($this->definition['options arguments']) && is_array($this->definition['options arguments'])) {
+        $this->value_options = call_user_func_array($this->definition['options callback'], $this->definition['options arguments']);
+      }
+      else {
+        $this->value_options = call_user_func($this->definition['options callback']);
+      }
+    }
+    else {
+      $this->value_options = array('Pending Approval' => 'Pending Approval', 'Declined' => 'Declined');
+    }
+
+    return $this->value_options;
+    //return array(t('Deposite'), t('Transfer'));
+  }
+
+  function expose_options() {
+    parent::expose_options();
+    $this->options['expose']['reduce'] = FALSE;
+  }
+
+  function expose_form(&$form, &$form_state) {
+    parent::expose_form($form, $form_state);
+    $form['expose']['reduce'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Limit list to selected items'),
+      '#description' => t('If checked, the only items presented to the user will be the ones selected here.'),
+      '#default_value' => !empty($this->options['expose']['reduce']), // safety
+    );
+  }
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['operator']['default'] = 'in';
+    $options['value']['default'] = array();
+    $options['expose']['contains']['reduce'] = array('default' => FALSE);
+
+    return $options;
+  }
+
+  /**
+   * This kind of construct makes it relatively easy for a child class
+   * to add or remove functionality by overriding this function and
+   * adding/removing items from this array.
+   */
+  function operators() {
+    $operators = array(
+      'in' => array(
+        'title' => t('Is one of'),
+        'short' => t('in'),
+        'short_single' => t('='),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+      'not in' => array(
+        'title' => t('Is not one of'),
+        'short' => t('not in'),
+        'short_single' => t('<>'),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+    );
+    // if the definition allows for the empty operator, add it.
+    if (!empty($this->definition['allow empty'])) {
+      $operators += array(
+        'empty' => array(
+          'title' => t('Is empty (NULL)'),
+          'method' => 'op_empty',
+          'short' => t('empty'),
+          'values' => 0,
+        ),
+        'not empty' => array(
+          'title' => t('Is not empty (NOT NULL)'),
+          'method' => 'op_empty',
+          'short' => t('not empty'),
+          'values' => 0,
+        ),
+      );
+    }
+
+    return $operators;
+  }
+
+  /**
+   * Build strings from the operators() for 'select' options
+   */
+  function operator_options($which = 'title') {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      $options[$id] = $info[$which];
+    }
+
+    return $options;
+  }
+
+  function operator_values($values = 1) {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      if (isset($info['values']) && $info['values'] == $values) {
+        $options[] = $id;
+      }
+    }
+
+    return $options;
+  }
+
+  function value_form(&$form, &$form_state) {
+    $form['value'] = array();
+    $options = array();
+
+    if (empty($form_state['exposed'])) {
+      // Add a select all option to the value form.
+      $options = array('all' => t('Select all'));
+    }
+
+    $this->get_value_options();
+    $options += $this->value_options;
+    $default_value = (array) $this->value;
+
+    $which = 'all';
+    if (!empty($form['operator'])) {
+      $source = ($form['operator']['#type'] == 'radios') ? 'radio:options[operator]' : 'edit-options-operator';
+    }
+    if (!empty($form_state['exposed'])) {
+      $identifier = $this->options['expose']['identifier'];
+
+      if (empty($this->options['expose']['use_operator']) || empty($this->options['expose']['operator_id'])) {
+        // exposed and locked.
+        $which = in_array($this->operator, $this->operator_values(1)) ? 'value' : 'none';
+      }
+      else {
+        $source = 'edit-' . drupal_html_id($this->options['expose']['operator_id']);
+      }
+
+      if (!empty($this->options['expose']['reduce'])) {
+        $options = $this->reduce_value_options();
+
+        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {
+          $default_value = array();
+        }
+      }
+
+      if (empty($this->options['expose']['multiple'])) {
+        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {
+          $default_value = 'All';
+        }
+        elseif (empty($default_value)) {
+          $keys = array_keys($options);
+          $default_value = array_shift($keys);
+        }
+        else {
+          $copy = $default_value;
+          $default_value = array_shift($copy);
+        }
+      }
+    }
+
+    if ($which == 'all' || $which == 'value') {
+      $form['value'] = array(
+        '#type' => $this->value_form_type,
+        '#title' => $this->value_title,
+        '#options' => $options,
+        '#default_value' => $default_value,
+        // These are only valid for 'select' type, but do no harm to checkboxes.
+        '#multiple' => TRUE,
+        '#size' => count($options) > 8 ? 8 : count($options),
+      );
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier])) {
+        $form_state['input'][$identifier] = $default_value;
+      }
+
+      if ($which == 'all') {
+        if (empty($form_state['exposed']) && (in_array($this->value_form_type, array('checkbox', 'checkboxes', 'radios', 'select')))) {
+          $form['value']['#prefix'] = '<div id="edit-options-value-wrapper">';
+          $form['value']['#suffix'] = '</div>';
+        }
+        $form['value']['#dependency'] = array($source => $this->operator_values(1));
+      }
+    }
+  }
+
+  /**
+   * When using exposed filters, we may be required to reduce the set.
+   */
+  function reduce_value_options($input = NULL) {
+    if (!isset($input)) {
+      $input = $this->value_options;
+    }
+
+    // Because options may be an array of strings, or an array of mixed arrays
+    // and strings (optgroups) or an array of objects, we have to
+    // step through and handle each one individually.
+    $options = array();
+    foreach ($input as $id => $option) {
+      if (is_array($option)) {
+        $options[$id] = $this->reduce_value_options($option);
+        continue;
+      }
+      elseif (is_object($option)) {
+        $keys = array_keys($option->option);
+        $key = array_shift($keys);
+        if (isset($this->options['value'][$key])) {
+          $options[$id] = $option;
+        }
+      }
+      elseif (isset($this->options['value'][$id])) {
+        $options[$id] = $option;
+      }
+    }
+    return $options;
+  }
+
+  function accept_exposed_input($input) {
+    // A very special override because the All state for this type of
+    // filter could have a default:
+    if (empty($this->options['exposed'])) {
+      return TRUE;
+    }
+
+    // If this is non-multiple and non-required, then this filter will
+    // participate, but using the default settings, *if* 'limit is true.
+    if (empty($this->options['expose']['multiple']) && empty($this->options['expose']['required']) && !empty($this->options['expose']['limit'])) {
+      $identifier = $this->options['expose']['identifier'];
+      if ($input[$identifier] == 'All') {
+        return TRUE;
+      }
+    }
+
+    return parent::accept_exposed_input($input);
+  }
+
+  function value_submit($form, &$form_state) {
+    // Drupal's FAPI system automatically puts '0' in for any checkbox that
+    // was not set, and the key to the checkbox if it is set.
+    // Unfortunately, this means that if the key to that checkbox is 0,
+    // we are unable to tell if that checkbox was set or not.
+
+    // Luckily, the '#value' on the checkboxes form actually contains
+    // *only* a list of checkboxes that were set, and we can use that
+    // instead.
+
+    $form_state['values']['options']['value'] = $form['value']['#value'];
+  }
+
+  function admin_summary() {
+    if (!empty($this->options['exposed'])) {
+      return t('exposed');
+    }
+    $info = $this->operators();
+
+    $this->get_value_options();
+
+    if (!is_array($this->value)) {
+      return;
+    }
+
+    $operator = check_plain($info[$this->operator]['short']);
+    $values = '';
+    if (in_array($this->operator, $this->operator_values(1))) {
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($this->value_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $values = t('Unknown');
+      }
+      else if (count($this->value) == 1) {
+        // If any, use the 'single' short name of the operator instead.
+        if (isset($info[$this->operator]['short_single'])) {
+          $operator = check_plain($info[$this->operator]['short_single']);
+        }
+
+        $keys = $this->value;
+        $value = array_shift($keys);
+        if (isset($this->value_options[$value])) {
+          $values = check_plain($this->value_options[$value]);
+        }
+        else {
+          $values = '';
+        }
+      }
+      else {
+        foreach ($this->value as $value) {
+          if ($values !== '') {
+            $values .= ', ';
+          }
+          if (drupal_strlen($values) > 8) {
+            $values .= '...';
+            break;
+          }
+          if (isset($this->value_options[$value])) {
+            $values .= check_plain($this->value_options[$value]);
+          }
+        }
+      }
+    }
+
+    return $operator . (($values !== '') ? ' ' . $values : '');
+  }
+
+  function query() {
+    $info = $this->operators();
+    if (!empty($info[$this->operator]['method'])) {
+      $this->{$info[$this->operator]['method']}();
+    }
+  }
+
+  function op_simple() {
+    if (empty($this->value)) {
+      return;
+    }
+    $this->ensure_my_table();
+
+    // We use array_values() because the checkboxes keep keys and that can cause
+    // array addition problems.
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", array_values($this->value), $this->operator);
+  }
+
+  function op_empty() {
+    $this->ensure_my_table();
+    if ($this->operator == 'empty') {
+      $operator = "IS NULL";
+    }
+    else {
+      $operator = "IS NOT NULL";
+    }
+
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", NULL, $operator);
+  }
+
+  function validate() {
+    $this->get_value_options();
+    $errors = array();
+
+    // If the operator is an operator which doesn't require a value, there is
+    // no need for additional validation.
+    if (in_array($this->operator, $this->operator_values(0))) {
+      return array();
+    }
+
+    if (!in_array($this->operator, $this->operator_values(1))) {
+      $errors[] = t('The operator is invalid on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+    }
+    if (is_array($this->value)) {
+      if (!isset($this->value_options)) {
+        // Don't validate if there are none value options provided, for example for special handlers.
+        return $errors;
+      }
+      if ($this->options['exposed'] && !$this->options['expose']['required'] && empty($this->value)) {
+        // Don't validate if the field is exposed and no default value is provided.
+        return $errors;
+      }
+
+      // Some filter_in_operator usage uses optgroups forms, so flatten it.
+      $flat_options = form_options_flatten($this->value_options, TRUE);
+
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($flat_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $errors[] = t('No valid values found on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+      }
+    }
+    elseif (!empty($this->value) && ($this->operator == 'in' || $this->operator == 'not in')) {
+      $errors[] = t('The value @value is not an array for @operator on filter: @filter', array('@value' => views_var_export($this->value), '@operator' => $this->operator, '@filter' => $this->ui_name(TRUE)));
+    }
+    return $errors;
+  }
+}
diff --git a/includes/views/handlers/commerce_funds_type_views_handler_filter_in_operator.inc b/includes/views/handlers/commerce_funds_type_views_handler_filter_in_operator.inc
new file mode 100755
index 0000000..5c6fba5
--- /dev/null
+++ b/includes/views/handlers/commerce_funds_type_views_handler_filter_in_operator.inc
@@ -0,0 +1,418 @@
+<?php
+/**
+ * Simple filter to handle matching of multiple options selectable via checkboxes
+ *
+ * Definition items:
+ * - options callback: The function to call in order to generate the value options. If omitted, the options 'Yes' and 'No' will be used.
+ * - options arguments: An array of arguments to pass to the options callback.
+ *
+ * @ingroup views_filter_handlers
+ */
+class commerce_funds_type_views_handler_filter_in_operator extends views_handler_filter_in_operator {
+  var $value_form_type = 'checkboxes';
+
+  /**
+   * @var array
+   * Stores all operations which are available on the form.
+   */
+  var $value_options = NULL;
+
+  function construct() {
+    parent::construct();
+    $this->value_title = t('Options');
+    $this->value_options = NULL;
+  }
+
+  /**
+   * Child classes should be used to override this function and set the
+   * 'value options', unless 'options callback' is defined as a valid function
+   * or static public method to generate these values.
+   *
+   * This can use a guard to be used to reduce database hits as much as
+   * possible.
+   *
+   * @return
+   *   Return the stored values in $this->value_options if someone expects it.
+   */
+  function get_value_options() {
+    if (isset($this->value_options)) {
+      return;
+    }
+
+    if (isset($this->definition['options callback']) && is_callable($this->definition['options callback'])) {
+      if (isset($this->definition['options arguments']) && is_array($this->definition['options arguments'])) {
+        $this->value_options = call_user_func_array($this->definition['options callback'], $this->definition['options arguments']);
+      }
+      else {
+        $this->value_options = call_user_func($this->definition['options callback']);
+      }
+    }
+    else {
+      $this->value_options = array('Deposit' => 'Deposit', 'Transfer' => 'Transfer', 'Escrow Payment' => 'Escrow Payment', 'Completed Escrow Payment' => 'Completed Escrow Payment');
+    }
+
+    return $this->value_options;
+    //return array(t('Deposite'), t('Transfer'));
+  }
+
+  function expose_options() {
+    parent::expose_options();
+    $this->options['expose']['reduce'] = FALSE;
+  }
+
+  function expose_form(&$form, &$form_state) {
+    parent::expose_form($form, $form_state);
+    $form['expose']['reduce'] = array(
+      '#type' => 'checkbox',
+      '#title' => t('Limit list to selected items'),
+      '#description' => t('If checked, the only items presented to the user will be the ones selected here.'),
+      '#default_value' => !empty($this->options['expose']['reduce']), // safety
+    );
+  }
+
+  function option_definition() {
+    $options = parent::option_definition();
+
+    $options['operator']['default'] = 'in';
+    $options['value']['default'] = array();
+    $options['expose']['contains']['reduce'] = array('default' => FALSE);
+
+    return $options;
+  }
+
+  /**
+   * This kind of construct makes it relatively easy for a child class
+   * to add or remove functionality by overriding this function and
+   * adding/removing items from this array.
+   */
+  function operators() {
+    $operators = array(
+      'in' => array(
+        'title' => t('Is one of'),
+        'short' => t('in'),
+        'short_single' => t('='),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+      'not in' => array(
+        'title' => t('Is not one of'),
+        'short' => t('not in'),
+        'short_single' => t('<>'),
+        'method' => 'op_simple',
+        'values' => 1,
+      ),
+    );
+    // if the definition allows for the empty operator, add it.
+    if (!empty($this->definition['allow empty'])) {
+      $operators += array(
+        'empty' => array(
+          'title' => t('Is empty (NULL)'),
+          'method' => 'op_empty',
+          'short' => t('empty'),
+          'values' => 0,
+        ),
+        'not empty' => array(
+          'title' => t('Is not empty (NOT NULL)'),
+          'method' => 'op_empty',
+          'short' => t('not empty'),
+          'values' => 0,
+        ),
+      );
+    }
+
+    return $operators;
+  }
+
+  /**
+   * Build strings from the operators() for 'select' options
+   */
+  function operator_options($which = 'title') {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      $options[$id] = $info[$which];
+    }
+
+    return $options;
+  }
+
+  function operator_values($values = 1) {
+    $options = array();
+    foreach ($this->operators() as $id => $info) {
+      if (isset($info['values']) && $info['values'] == $values) {
+        $options[] = $id;
+      }
+    }
+
+    return $options;
+  }
+
+  function value_form(&$form, &$form_state) {
+    $form['value'] = array();
+    $options = array();
+
+    if (empty($form_state['exposed'])) {
+      // Add a select all option to the value form.
+      $options = array('all' => t('Select all'));
+    }
+
+    $this->get_value_options();
+    $options += $this->value_options;
+    $default_value = (array) $this->value;
+
+    $which = 'all';
+    if (!empty($form['operator'])) {
+      $source = ($form['operator']['#type'] == 'radios') ? 'radio:options[operator]' : 'edit-options-operator';
+    }
+    if (!empty($form_state['exposed'])) {
+      $identifier = $this->options['expose']['identifier'];
+
+      if (empty($this->options['expose']['use_operator']) || empty($this->options['expose']['operator_id'])) {
+        // exposed and locked.
+        $which = in_array($this->operator, $this->operator_values(1)) ? 'value' : 'none';
+      }
+      else {
+        $source = 'edit-' . drupal_html_id($this->options['expose']['operator_id']);
+      }
+
+      if (!empty($this->options['expose']['reduce'])) {
+        $options = $this->reduce_value_options();
+
+        if (!empty($this->options['expose']['multiple']) && empty($this->options['expose']['required'])) {
+          $default_value = array();
+        }
+      }
+
+      if (empty($this->options['expose']['multiple'])) {
+        if (empty($this->options['expose']['required']) && (empty($default_value) || !empty($this->options['expose']['reduce']))) {
+          $default_value = 'All';
+        }
+        elseif (empty($default_value)) {
+          $keys = array_keys($options);
+          $default_value = array_shift($keys);
+        }
+        else {
+          $copy = $default_value;
+          $default_value = array_shift($copy);
+        }
+      }
+    }
+
+    if ($which == 'all' || $which == 'value') {
+      $form['value'] = array(
+        '#type' => $this->value_form_type,
+        '#title' => $this->value_title,
+        '#options' => $options,
+        '#default_value' => $default_value,
+        // These are only valid for 'select' type, but do no harm to checkboxes.
+        '#multiple' => TRUE,
+        '#size' => count($options) > 8 ? 8 : count($options),
+      );
+      if (!empty($form_state['exposed']) && !isset($form_state['input'][$identifier])) {
+        $form_state['input'][$identifier] = $default_value;
+      }
+
+      if ($which == 'all') {
+        if (empty($form_state['exposed']) && (in_array($this->value_form_type, array('checkbox', 'checkboxes', 'radios', 'select')))) {
+          $form['value']['#prefix'] = '<div id="edit-options-value-wrapper">';
+          $form['value']['#suffix'] = '</div>';
+        }
+        $form['value']['#dependency'] = array($source => $this->operator_values(1));
+      }
+    }
+  }
+
+  /**
+   * When using exposed filters, we may be required to reduce the set.
+   */
+  function reduce_value_options($input = NULL) {
+    if (!isset($input)) {
+      $input = $this->value_options;
+    }
+
+    // Because options may be an array of strings, or an array of mixed arrays
+    // and strings (optgroups) or an array of objects, we have to
+    // step through and handle each one individually.
+    $options = array();
+    foreach ($input as $id => $option) {
+      if (is_array($option)) {
+        $options[$id] = $this->reduce_value_options($option);
+        continue;
+      }
+      elseif (is_object($option)) {
+        $keys = array_keys($option->option);
+        $key = array_shift($keys);
+        if (isset($this->options['value'][$key])) {
+          $options[$id] = $option;
+        }
+      }
+      elseif (isset($this->options['value'][$id])) {
+        $options[$id] = $option;
+      }
+    }
+    return $options;
+  }
+
+  function accept_exposed_input($input) {
+    // A very special override because the All state for this type of
+    // filter could have a default:
+    if (empty($this->options['exposed'])) {
+      return TRUE;
+    }
+
+    // If this is non-multiple and non-required, then this filter will
+    // participate, but using the default settings, *if* 'limit is true.
+    if (empty($this->options['expose']['multiple']) && empty($this->options['expose']['required']) && !empty($this->options['expose']['limit'])) {
+      $identifier = $this->options['expose']['identifier'];
+      if ($input[$identifier] == 'All') {
+        return TRUE;
+      }
+    }
+
+    return parent::accept_exposed_input($input);
+  }
+
+  function value_submit($form, &$form_state) {
+    // Drupal's FAPI system automatically puts '0' in for any checkbox that
+    // was not set, and the key to the checkbox if it is set.
+    // Unfortunately, this means that if the key to that checkbox is 0,
+    // we are unable to tell if that checkbox was set or not.
+
+    // Luckily, the '#value' on the checkboxes form actually contains
+    // *only* a list of checkboxes that were set, and we can use that
+    // instead.
+
+    $form_state['values']['options']['value'] = $form['value']['#value'];
+  }
+
+  function admin_summary() {
+    if (!empty($this->options['exposed'])) {
+      return t('exposed');
+    }
+    $info = $this->operators();
+
+    $this->get_value_options();
+
+    if (!is_array($this->value)) {
+      return;
+    }
+
+    $operator = check_plain($info[$this->operator]['short']);
+    $values = '';
+    if (in_array($this->operator, $this->operator_values(1))) {
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($this->value_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $values = t('Unknown');
+      }
+      else if (count($this->value) == 1) {
+        // If any, use the 'single' short name of the operator instead.
+        if (isset($info[$this->operator]['short_single'])) {
+          $operator = check_plain($info[$this->operator]['short_single']);
+        }
+
+        $keys = $this->value;
+        $value = array_shift($keys);
+        if (isset($this->value_options[$value])) {
+          $values = check_plain($this->value_options[$value]);
+        }
+        else {
+          $values = '';
+        }
+      }
+      else {
+        foreach ($this->value as $value) {
+          if ($values !== '') {
+            $values .= ', ';
+          }
+          if (drupal_strlen($values) > 8) {
+            $values .= '...';
+            break;
+          }
+          if (isset($this->value_options[$value])) {
+            $values .= check_plain($this->value_options[$value]);
+          }
+        }
+      }
+    }
+
+    return $operator . (($values !== '') ? ' ' . $values : '');
+  }
+
+  function query() {
+    $info = $this->operators();
+    if (!empty($info[$this->operator]['method'])) {
+      $this->{$info[$this->operator]['method']}();
+    }
+  }
+
+  function op_simple() {
+    if (empty($this->value)) {
+      return;
+    }
+    $this->ensure_my_table();
+
+    // We use array_values() because the checkboxes keep keys and that can cause
+    // array addition problems.
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", array_values($this->value), $this->operator);
+  }
+
+  function op_empty() {
+    $this->ensure_my_table();
+    if ($this->operator == 'empty') {
+      $operator = "IS NULL";
+    }
+    else {
+      $operator = "IS NOT NULL";
+    }
+
+    $this->query->add_where($this->options['group'], "$this->table_alias.$this->real_field", NULL, $operator);
+  }
+
+  function validate() {
+    $this->get_value_options();
+    $errors = array();
+
+    // If the operator is an operator which doesn't require a value, there is
+    // no need for additional validation.
+    if (in_array($this->operator, $this->operator_values(0))) {
+      return array();
+    }
+
+    if (!in_array($this->operator, $this->operator_values(1))) {
+      $errors[] = t('The operator is invalid on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+    }
+    if (is_array($this->value)) {
+      if (!isset($this->value_options)) {
+        // Don't validate if there are none value options provided, for example for special handlers.
+        return $errors;
+      }
+      if ($this->options['exposed'] && !$this->options['expose']['required'] && empty($this->value)) {
+        // Don't validate if the field is exposed and no default value is provided.
+        return $errors;
+      }
+
+      // Some filter_in_operator usage uses optgroups forms, so flatten it.
+      $flat_options = form_options_flatten($this->value_options, TRUE);
+
+      // Remove every element which is not known.
+      foreach ($this->value as $value) {
+        if (!isset($flat_options[$value])) {
+          unset($this->value[$value]);
+        }
+      }
+      // Choose different kind of ouput for 0, a single and multiple values.
+      if (count($this->value) == 0) {
+        $errors[] = t('No valid values found on filter: @filter.', array('@filter' => $this->ui_name(TRUE)));
+      }
+    }
+    elseif (!empty($this->value) && ($this->operator == 'in' || $this->operator == 'not in')) {
+      $errors[] = t('The value @value is not an array for @operator on filter: @filter', array('@value' => views_var_export($this->value), '@operator' => $this->operator, '@filter' => $this->ui_name(TRUE)));
+    }
+    return $errors;
+  }
+}
diff --git a/modules/commerce_funds_deposit/commerce_funds_deposit.info b/modules/commerce_funds_deposit/commerce_funds_deposit.info
new file mode 100755
index 0000000..5197458
--- /dev/null
+++ b/modules/commerce_funds_deposit/commerce_funds_deposit.info
@@ -0,0 +1,13 @@
+name =  Commerce Funds Deposit
+description = Allow users to deposit funds to thier account
+core = 7.x
+dependencies[] = commerce_funds
+dependencies[] = rules
+dependencies[] = commerce_product
+dependencies[] = commerce_cart
+dependencies[] = commerce_order
+dependencies[] = commerce_checkout
+dependencies[] = commerce_line_item_ui
+dependencies[] = commerce_customer_ui
+
+package = "Commerce Funds"
\ No newline at end of file
diff --git a/modules/commerce_funds_deposit/commerce_funds_deposit.module b/modules/commerce_funds_deposit/commerce_funds_deposit.module
new file mode 100755
index 0000000..22e7029
--- /dev/null
+++ b/modules/commerce_funds_deposit/commerce_funds_deposit.module
@@ -0,0 +1,207 @@
+<?php
+/**
+ * @file
+ *   commerce_funds_depost.module
+ */
+
+/**
+ * Implements hook_permission().
+ */
+function commerce_funds_deposit_permission() {
+  return array(
+    'deposit funds' => array(
+      'title' => t('Deposit Funds'),
+      'description' => 'Allow users to deposit funds',
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_funds_deposit_menu() {
+
+  $items['user/funds/deposit'] = array(
+    'title' => 'Deposit Funds',
+    'page callback' => 'commerce_funds_deposit_funds',
+    'access arguments' => array('deposit funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Implements hook_commerce_product_type_info().
+ */
+function commerce_funds_deposit_commerce_product_type_info() {
+
+  return array(
+    'deposit' => array(
+      'type' => 'deposit',
+      'name' => 'Funds Deposit',
+      'description' => 'Stores a Funds Deposit Operation',
+      'help' => '',
+      'revision' => 1
+    )
+  );
+}
+
+/**
+ * Loads commerce_funds_deposit_funds_form().
+ */
+function commerce_funds_deposit_funds() {
+  return drupal_get_form('commerce_funds_deposit_funds_form');
+}
+
+/**
+ * Implements hook_form().
+ */
+function commerce_funds_deposit_funds_form($form, &$form_state) {
+
+    $form['amount'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Deposit Funds'),
+    '#description' => t('Please enter the amount you wish to deposit in ' . commerce_default_currency() . ' or select any other currency'),
+    '#default_value' => '',
+    '#size' => 30,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $currencies = variable_get('commerce_enabled_currencies');
+  $enabled_currencies = array();
+  foreach ($currencies as $k => $v) {
+    if ($v !== 0 and !empty($v)) {
+      $enabled_currencies[] = $v;
+    }
+  }
+
+  $form['currency'] = array(
+    '#type' => 'select',
+    '#title' => t('Currency'),
+    '#options' =>  $enabled_currencies,
+    '#default_value' => commerce_default_currency(),
+    '#description' => t('Select desire currency'),
+  );
+
+  $form['notes'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Notes'),
+    '#description' => '',
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Deposit Funds'),
+  );
+
+  return $form;
+}
+
+/**
+ * Validate the form.
+ */
+function commerce_funds_deposit_funds_form_validate($form, &$form_state) {
+
+  global $user;
+
+  if (is_numeric($form_state['values']['currency'])) {
+    $form_result_value = $form_state['values']['currency'];
+    $form_state['values']['currency'] = $form_state['complete form']['currency']['#options'][$form_result_value];
+
+    $chosen_currency = $form_state['complete form']['currency']['#options'][$form_result_value];
+    $form_state['complete form']['currency']['#value'] = $chosen_currency;
+    $form_state['input']['currency'] = $chosen_currency;
+  }
+  else {
+    $chosen_currency = $form_state['values']['currency'];
+  }
+
+  if (!is_numeric($form_state['values']['amount'])) {
+    form_set_error('amount', t('Value must be Numeric'));
+    return FALSE;
+  }
+
+  if (is_numeric($form_state['values']['amount']) && !(floatval($form_state['values']['amount']) > 0)) {
+    form_set_error('amount', t('Value must be greater than 0'));
+    return FALSE;
+  }
+
+  $query = db_select('commerce_funds_account', 'user_account');
+  $query->fields('user_account', array('balance'));
+  $query->condition('uid', $user->uid);
+  $query->condition('currency_code', $chosen_currency);
+  $result = $query->execute();
+  foreach ($result as $data) {
+    $balance_db = $data->balance;
+  }
+  if (empty($balance_db)) {
+    $balance_db = 0;
+  }
+  else {
+    $balance_db = $balance_db / 100;
+  }
+  $allowed_deposit = 20000000 - $balance_db;
+
+  $total_deposit = $allowed_deposit + $form_state['values']['amount'];
+  if (is_numeric($form_state['values']['amount']) && (floatval($form_state['values']['amount']) > 0) && $form_state['values']['amount'] > $allowed_deposit ) {
+    if ($allowed_deposit == 0) {
+      form_set_error('amount', t('You have reached the maximum amount that you can deposit.'));
+    }
+    else {
+      form_set_error('amount', t('You can deposit up to @allowed_deposit @currency', array('@currency' => $chosen_currency, '@allowed_deposit' => $allowed_deposit)));
+    }
+    return FALSE;
+  }
+
+}
+
+/**
+ * Submits the form.
+ */
+function commerce_funds_deposit_funds_form_submit($form, &$form_state) {
+
+  global $user;
+
+  if (is_numeric($form_state['values']['currency'])) {
+    $form_result_value = $form_state['values']['currency'];
+    $form_state['values']['currency'] = $form_state['complete form']['currency']['#options'][$form_result_value];
+
+    $chosen_currency = $form_state['complete form']['currency']['#options'][$form_result_value];
+    $form_state['complete form']['currency']['#value'] = $chosen_currency;
+    $form_state['input']['currency'] = $chosen_currency;
+  }
+  else {
+    $chosen_currency = $form_state['values']['currency'];
+  }
+
+  $deposit = commerce_product_new('deposit');
+
+  $deposit->uid = $user->uid;
+  $deposit->sku = 'deposit_' . $user->uid . '_' . $form_state['values']['amount'] . '_' . microtime();
+  $deposit->commerce_price['und'][0]['amount'] = $form_state['values']['amount'] * 100.0;
+  $deposit->commerce_price['und'][0]['currency_code'] = $chosen_currency;
+  $_SESSION['currency'] = $chosen_currency;
+  $deposit->title = 'Deposit ' . commerce_currency_format($form_state['values']['amount'] * 100.0, $chosen_currency);
+
+  commerce_product_save($deposit);
+
+  $deposit_order = ($user->uid) ? commerce_order_new($user->uid, 'checkout_checkout') : commerce_cart_order_new();
+
+  $line_item = commerce_product_line_item_new($deposit, 1, $deposit_order->order_id);
+
+  commerce_line_item_save($line_item);
+
+  $order_wrapper = entity_metadata_wrapper('commerce_order', $deposit_order);
+
+  $order_wrapper->commerce_line_items[] = $line_item;
+
+
+  $deposit_order->data['type'] = 'commerce_funds_deposit';
+  $deposit_order->data['notes'] = $form_state['values']['notes'];
+
+  commerce_order_save($deposit_order);
+
+  drupal_goto('checkout/' . $deposit_order->order_id);
+}
diff --git a/modules/commerce_funds_deposit/commerce_funds_deposit.rules_defaults.inc b/modules/commerce_funds_deposit/commerce_funds_deposit.rules_defaults.inc
new file mode 100644
index 0000000..4328433
--- /dev/null
+++ b/modules/commerce_funds_deposit/commerce_funds_deposit.rules_defaults.inc
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Default rule configurations for License.
+ */
+
+/**
+ * Implements hook_default_rules_configuration().
+ */
+function commerce_funds_deposit_default_rules_configuration() {
+  $rules = array();
+  $rule = array();
+
+  $rule = rules_reaction_rule();
+
+  $rule->label = t('Activates funds deposit when the order is paid in full');
+  $rule->tags = array('Commerce Funds');
+  $rule->active = TRUE;
+
+  $rule
+    ->event('commerce_payment_order_paid_in_full')
+    ->action('commerce_funds_credit', array(
+      'account_user:select' => 'site:current-user',
+      'amount:select' => 'commerce-order:commerce-order-total',
+    ));
+
+  $rules['commerce_funds_activate_funds'] = $rule;
+
+
+  return $rules;
+}
\ No newline at end of file
diff --git a/modules/commerce_funds_deposit/includes/rules/commerce_funds_deposit.rules_defaults.inc b/modules/commerce_funds_deposit/includes/rules/commerce_funds_deposit.rules_defaults.inc
new file mode 100644
index 0000000..4328433
--- /dev/null
+++ b/modules/commerce_funds_deposit/includes/rules/commerce_funds_deposit.rules_defaults.inc
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * @file
+ * Default rule configurations for License.
+ */
+
+/**
+ * Implements hook_default_rules_configuration().
+ */
+function commerce_funds_deposit_default_rules_configuration() {
+  $rules = array();
+  $rule = array();
+
+  $rule = rules_reaction_rule();
+
+  $rule->label = t('Activates funds deposit when the order is paid in full');
+  $rule->tags = array('Commerce Funds');
+  $rule->active = TRUE;
+
+  $rule
+    ->event('commerce_payment_order_paid_in_full')
+    ->action('commerce_funds_credit', array(
+      'account_user:select' => 'site:current-user',
+      'amount:select' => 'commerce-order:commerce-order-total',
+    ));
+
+  $rules['commerce_funds_activate_funds'] = $rule;
+
+
+  return $rules;
+}
\ No newline at end of file
diff --git a/modules/commerce_funds_escrow/commerce_funds_escrow.info b/modules/commerce_funds_escrow/commerce_funds_escrow.info
new file mode 100755
index 0000000..5a7c84c
--- /dev/null
+++ b/modules/commerce_funds_escrow/commerce_funds_escrow.info
@@ -0,0 +1,13 @@
+name =  Commerce Funds ESCROW
+description = Allow users to make ESCROW payments from thier account
+core = 7.x
+dependencies[] = commerce_funds
+dependencies[] = rules
+dependencies[] = commerce_product
+dependencies[] = commerce_cart
+dependencies[] = commerce_order
+dependencies[] = commerce_checkout
+dependencies[] = commerce_line_item_ui
+dependencies[] = commerce_customer_ui
+
+package = "Commerce Funds"
\ No newline at end of file
diff --git a/modules/commerce_funds_escrow/commerce_funds_escrow.module b/modules/commerce_funds_escrow/commerce_funds_escrow.module
new file mode 100755
index 0000000..3bca089
--- /dev/null
+++ b/modules/commerce_funds_escrow/commerce_funds_escrow.module
@@ -0,0 +1,243 @@
+<?php
+/**
+ * @file
+ *   commerce_funds_escrow.module
+ */
+
+/**
+ * Implements hook_permission().
+ */
+function commerce_funds_escrow_permission() {
+  return array(
+    'create escrow payment' => array(
+      'title' => 'Create Escrow Payment',
+      'description' => t('Allow users to transfer funds'),
+    ),
+    'manage own escrow payment' => array(
+      'title' => 'Manage Own Escrow Payment',
+      'description' => t('Allow users to manage escrow payments'),
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_funds_escrow_menu() {
+
+  $items['user/funds/escrow-payments'] = array(
+    'title' => 'Escrow Payments',
+    'page callback' => 'commerce_funds_get_user_escrow_payments',
+    'access arguments' => array('manage own escrow payment'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/create-escrow'] = array(
+    'title' => 'Create Escrow Payment',
+    'page callback' => 'commerce_funds_escrow_payment',
+    'access arguments' => array('create escrow payment'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/release-escrow/%'] = array(
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_release_escrow_payment', 3),
+    'access arguments' => array('transfer funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/cancel-escrow/%'] = array(
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_cancel_escrow_payment', 3),
+    'access arguments' => array('transfer funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+function commerce_funds_escrow_payment() {
+  return drupal_get_form('commerce_funds_escrow_payment_form');
+}
+
+function commerce_funds_escrow_payment_form($form, &$form_state) {
+
+  $form['amount'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Amount to put in Escrow (' . commerce_default_currency() . ')'),
+    '#description' => t('Please enter the amount you wish to assign as an escrow payment in ' . commerce_default_currency()),
+    '#default_value' => '',
+    '#size' => 30,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['email'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Allocated To'),
+    '#description' => t('Please enter the email of the user you want to allocate the escrow payment to'),
+    '#default_value' => '',
+    '#size' => 30,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['notes'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Notes'),
+    '#description' => '',
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Allocate Funds'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_escrow_payment_form_validate($form, &$form_state) {
+
+  global $user;
+
+  if (!is_numeric($form_state['values']['amount'])) {
+    form_set_error('amount', t('Value must be Numeric'));
+    return FALSE;
+  }
+
+  if (is_numeric($form_state['values']['amount']) && !(floatval($form_state['values']['amount']) > 0)) {
+    form_set_error('amount', t('Value must be greater than 0'));
+    return FALSE;
+  }
+
+  if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
+    form_set_error('email', t('Please enter a valid email'));
+    return FALSE;
+  }
+
+  $exists = db_query("SELECT * FROM {users} WHERE mail='" . $form_state['values']['email'] . "'")->fetchAssoc();
+
+  if (!$exists) {
+    form_set_error('email', t('We have no record of users with the email') . ' ' . $form_state['values']['email']);
+    return FALSE;
+  }
+
+  $user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $user->uid)->fetchAssoc();
+
+  if ($user_balance['balance'] < intval($form_state['values']['amount'] * 100)) {
+    form_set_error('amount', t("You don't have enough funds to cover this transfer"));
+    return FALSE;
+  }
+}
+
+function commerce_funds_escrow_payment_form_submit($form, &$form_state) {
+
+  global $user;
+
+  $from_user = $user;
+  $to_user = db_query("SELECT * FROM {users} WHERE mail='" . $form_state['values']['email'] . "'")->fetchAssoc();
+
+  $transfer_amount = intval($form_state['values']['amount'] * 100.0);
+
+  $transaction = new stdClass();
+
+  $transaction->uid = $from_user->uid;
+  $transaction->type = 'Escrow Payment';
+  $transaction->reference = $to_user['uid'];
+  $transaction->created = time();
+  $transaction->amount = $transfer_amount;
+  $transaction->notes = $form_state['values']['notes'];
+
+  $from_user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $from_user->uid)->fetchAssoc();
+  $from_user_balance['balance'] -= $transfer_amount;
+
+  $exists = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $to_user['uid'])->fetchAssoc();
+
+  if (!$exists) {
+    $user_balance = new stdClass();
+    $user_balance->uid = $to_user['uid'];
+    $user_balance->balance = 0;
+    drupal_write_record('commerce_funds_user_funds', $user_balance);
+  }
+
+  drupal_write_record('commerce_funds_user_funds', $from_user_balance, 'uid');
+  drupal_write_record('commerce_funds_transactions', $transaction);
+
+  drupal_set_message(t('Escrow Payment Created Successfully'), 'status');
+}
+
+function commerce_funds_cancel_escrow_payment($form, &$form_state, $transaction_id) {
+
+  $form['#$transaction_id'] = $transaction_id;
+
+  $transaction = db_query("SELECT * FROM {commerce_funds_transactions} WHERE transaction_id= :transaction_id", array(':transaction_id' => $transaction_id))->fetchAssoc();
+
+  $user = user_load($transaction['uid']);
+
+  return confirm_form($form, check_plain('Cancel Escrow Payment?'), 'user/funds/escrow-payments', check_plain('Are you sure you want to cancel this payment and return the funds to ' . $user->mail . '?'), check_plain('Yes'));
+}
+
+function commerce_funds_cancel_escrow_payment_submit($form, &$form_state) {
+
+  $transaction_id = $form['#$transaction_id'];
+
+  $transaction = db_query("SELECT * FROM {commerce_funds_transactions} WHERE transaction_id= :transaction_id", array(':transaction_id' => $transaction_id))->fetchAssoc();
+
+  $from_user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $transaction['uid'])->fetchAssoc();
+
+  $from_user_balance['balance'] += $transaction['amount'];
+
+  drupal_write_record('commerce_funds_user_funds', $from_user_balance, 'uid');
+
+  $transaction['type'] = 'Cancelled Escrow Payment';
+
+  drupal_write_record('commerce_funds_transactions', $transaction, 'transaction_id');
+
+  drupal_mail('commerce_funds', 'escrow_cancel_from', user_load($transaction['uid'])->mail, language_default(), array('transaction' => $transaction['transaction_id']));
+  drupal_mail('commerce_funds', 'escrow_cancel_to', user_load($transaction['reference'])->mail, language_default(), array('transaction' => $transaction['transaction_id']));
+
+  drupal_goto('user/funds/escrow-payments');
+}
+
+function commerce_funds_release_escrow_payment($form, &$form_state, $transaction_id) {
+
+  $form['#$transaction_id'] = $transaction_id;
+
+  $transaction = db_query("SELECT * FROM {commerce_funds_transactions} WHERE transaction_id= :transaction_id", array(':transaction_id' => $transaction_id))->fetchAssoc();
+
+  $user = user_load($transaction['reference']);
+
+  return confirm_form($form, check_plain('Release Escrow Payment?'), 'user/funds/escrow-payments', check_plain('Are you sure you want to release this payment and send the funds to ' . $user->mail . '?'), check_plain('Yes'));
+}
+
+function commerce_funds_release_escrow_payment_submit($form, &$form_state) {
+
+  $transaction_id = $form['#$transaction_id'];
+
+  $fees = variable_get('commerce_funds_fees', array());
+
+  $fee = array_key_exists('escrow', $fees) ? $fees['escrow'] : 0;
+  $fee_fixed = array_key_exists('escrow_fixed', $fees) ? $fees['escrow_fixed'] : 0;
+
+  $transaction = db_query("SELECT * FROM {commerce_funds_transactions} WHERE transaction_id= :transaction_id", array(':transaction_id' => $transaction_id))->fetchAssoc();
+
+  $to_user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $transaction['reference'])->fetchAssoc();
+
+  $escrow_after_fee = $transaction['amount'] * (1.0 - $fee / 100.0);
+  $escrow_after_fee_fixed = $transaction['amount'] - $fee_fixed;
+
+  $to_user_balance['balance'] += min(array($escrow_after_fee, $escrow_after_fee_fixed));
+
+  drupal_write_record('commerce_funds_user_funds', $to_user_balance, 'uid');
+
+  $transaction['type'] = 'Completed Escrow Payment';
+
+  drupal_write_record('commerce_funds_transactions', $transaction, 'transaction_id');
+
+  drupal_goto('user/funds/escrow-payments');
+}
+
+function commerce_funds_get_user_escrow_payments() {
+  global $user;
+  return theme('account_incoming_escrows', array('uid' => $user->uid)) . theme('account_outgoing_escrows', array('uid' => $user->uid));
+}
\ No newline at end of file
diff --git a/modules/commerce_funds_payment/commerce_funds_payment.info b/modules/commerce_funds_payment/commerce_funds_payment.info
new file mode 100755
index 0000000..a9a5fa5
--- /dev/null
+++ b/modules/commerce_funds_payment/commerce_funds_payment.info
@@ -0,0 +1,6 @@
+name = Commerce Funds Payment
+description = Adds a "Funds" payment method
+package = Commerce Funds
+dependencies[] = commerce_funds
+core = 7.x
+
diff --git a/modules/commerce_funds_payment/commerce_funds_payment.module b/modules/commerce_funds_payment/commerce_funds_payment.module
new file mode 100755
index 0000000..81d9edb
--- /dev/null
+++ b/modules/commerce_funds_payment/commerce_funds_payment.module
@@ -0,0 +1,103 @@
+<?php
+
+function commerce_funds_payment_commerce_payment_method_info() {
+
+  $payment_methods = array();
+
+  $payment_methods['commerce_funds_payment'] = array(
+    'title' => t('Account Funds'),
+    'short_title' => t('Funds'),
+    'display_title' => t('Account Funds'),
+    'description' => t('Funds in User Account'),
+    'terminal' => FALSE,
+    'offsite' => FALSE,
+  );
+
+  return $payment_methods;
+}
+
+function commerce_funds_payment_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
+
+  $wrapper = entity_metadata_wrapper('commerce_order', $order);
+  $total = commerce_line_items_total($wrapper->commerce_line_items);
+
+  $account_user = user_load($order->uid);
+
+  $funds_account = commerce_funds_account_load_by_user($account_user, $total['currency_code']);
+
+  $result = $funds_account->balance - $total['amount'];
+
+  $form['balance'] = array(
+      '#type' => 'markup',
+      '#markup' => 'Availiable Funds: ' . commerce_currency_format($funds_account->balance, $funds_account->currency_code),
+      '#prefix' => '<p>',
+    '#sufix' => '</p>'
+  );
+
+  $form['total'] = array(
+    '#type' => 'markup',
+    '#markup' => 'Order Total: ' . commerce_currency_format($total['amount'], $total['currency_code']),
+    '#prefix' => '<p>',
+    '#sufix' => '</p>'
+  );
+
+  $form['result'] = array(
+    '#type' => 'markup',
+    '#markup' => 'Balance after order: ' . commerce_currency_format($result, $funds_account->currency_code),
+    '#prefix' => '<p>',
+    '#sufix' => '</p>'
+  );
+
+  return $form;
+}
+
+function commerce_funds_payment_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $charge) {
+  $wrapper = entity_metadata_wrapper('commerce_order', $order);
+  $total = commerce_line_items_total($wrapper->commerce_line_items);
+
+  $account_user = user_load($order->uid);
+
+  $funds_account = commerce_funds_account_load_by_user($account_user, $total['currency_code']);
+
+  $result = $funds_account->balance - $total['amount'];
+
+  if ($result > 0) {
+    return TRUE;
+  }
+  return FALSE;
+}
+
+function commerce_funds_payment_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
+  $return = commerce_funds_payment_transaction($payment_method, $order, $charge);
+  return $return;
+}
+
+function commerce_funds_payment_transaction($payment_method, $order, $amount) {
+  $account_user = user_load($order->uid);
+  $account = commerce_funds_account_load_by_user($account_user, $amount['currency_code']);
+
+  $account->balance -= $amount['amount'];
+
+  $funds_transaction = commerce_funds_transaction_new('payment');
+  $funds_transaction->account_id = $account->account_id;
+  $funds_transaction->reference = $order->order_id;
+  $funds_transaction->amount = -$amount['amount'];
+  $funds_transaction->currency_code = $amount['currency_code'];
+
+  if (commerce_funds_transaction_save($funds_transaction)) {
+    $transaction = commerce_payment_transaction_new('commerce_funds_payment', $order->order_id);
+    $transaction->instance_id = $payment_method['instance_id'];
+    $transaction->amount = $amount['amount'];
+    $transaction->currency_code = $amount['currency_code'];
+    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
+    $transaction->message = t('Payment processed successfully');
+    $transaction->remote_id = $funds_transaction->transaction_id;
+
+    if (commerce_payment_transaction_save($transaction)){
+      commerce_funds_account_save($account);
+      return TRUE;
+    }
+  }
+
+  return FALSE;
+}
\ No newline at end of file
diff --git a/modules/commerce_funds_transfer/commerce_funds_transfer.info b/modules/commerce_funds_transfer/commerce_funds_transfer.info
new file mode 100755
index 0000000..2d7fb90
--- /dev/null
+++ b/modules/commerce_funds_transfer/commerce_funds_transfer.info
@@ -0,0 +1,14 @@
+name =  Commerce Funds Transfer
+description = Allow users to transfer funds between thier accounts
+core = 7.x
+dependencies[] = commerce_funds
+dependencies[] = rules
+dependencies[] = commerce_product
+dependencies[] = commerce_cart
+dependencies[] = commerce_order
+dependencies[] = commerce_checkout
+dependencies[] = commerce_line_item_ui
+dependencies[] = commerce_customer_ui
+
+
+package = "Commerce Funds"
\ No newline at end of file
diff --git a/modules/commerce_funds_transfer/commerce_funds_transfer.module b/modules/commerce_funds_transfer/commerce_funds_transfer.module
new file mode 100755
index 0000000..9a8952d
--- /dev/null
+++ b/modules/commerce_funds_transfer/commerce_funds_transfer.module
@@ -0,0 +1,252 @@
+<?php
+/**
+ * @file
+ *   commerce_funds_transfer.module
+ */
+
+/**
+ * Implements hook_permission().
+ */
+function commerce_funds_transfer_permission() {
+  return array(
+    'transfer funds' => array(
+      'title' => 'Transfer Funds',
+      'description' => 'Allow users to transfer funds',
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_funds_transfer_menu() {
+
+  $items['user/funds/transfer'] = array(
+    'title' => 'Transfer Funds',
+    'page callback' => 'commerce_funds_transfer_funds',
+    'access arguments' => array('transfer funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  return $items;
+}
+
+/**
+ * Loads commerce_funds_transfer_funds_form().
+ */
+function commerce_funds_transfer_funds() {
+  return drupal_get_form('commerce_funds_transfer_funds_form');
+}
+
+/**
+ * Implements hook_form().
+ */
+function commerce_funds_transfer_funds_form($form, &$form_state) {
+
+  $form['amount'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Amount to transfer (' . commerce_default_currency() . ')'),
+    '#description' => t('Please enter the amount you wish to transfer in ' . commerce_default_currency()),
+    '#default_value' => '',
+    '#size' => 30,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $currencies = variable_get('commerce_enabled_currencies');
+  $enabled_currencies = array();
+  foreach ($currencies as $k => $v) {
+    if ($v !== 0 and !empty($v)) {
+      $enabled_currencies[] = $v;
+    }
+  }
+
+  $form['currency'] = array(
+    '#type' => 'select',
+    '#title' => t('Currency'),
+    '#options' =>  $enabled_currencies,
+    '#default_value' => commerce_default_currency(),
+    '#description' => t('Select desire currency'),
+  );
+
+  $form['email'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Transfer To'),
+    '#description' => t('Please enter the email of the user you want to transfer the funds to'),
+    '#default_value' => '',
+    '#size' => 30,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['notes'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Notes'),
+    '#description' => '',
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Transfer Funds'),
+  );
+
+  return $form;
+}
+/**
+ * Validate the form.
+ */
+function commerce_funds_transfer_funds_form_validate($form, &$form_state) {
+
+  global $user;
+  global $base_url;
+
+  if (!is_numeric($form_state['values']['amount'])) {
+
+    form_set_error('amount', t('Value must be Numeric'));
+    return FALSE;
+  }
+  if (is_numeric($form_state['values']['currency'])) {
+    $form_result_value = $form_state['values']['currency'];
+    $form_state['values']['currency'] = $form_state['complete form']['currency']['#options'][$form_result_value];
+
+    $chosen_currency = $form_state['complete form']['currency']['#options'][$form_result_value];
+    $form_state['complete form']['currency']['#value'] = $chosen_currency;
+    $form_state['input']['currency'] = $chosen_currency;
+  }
+  else{
+    $chosen_currency = $form_state['values']['currency'];
+  }
+
+  if (is_numeric($form_state['values']['amount']) && !(floatval($form_state['values']['amount']) > 0)) {
+    form_set_error('amount', t('Value must be greater than 0'));
+    return FALSE;
+  }
+
+  if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
+    form_set_error('email', t('Please enter a valid email'));
+    return FALSE;
+  }
+
+  $entered_email = $form_state['values']['email'];
+  $exists = db_query("SELECT * FROM {users} WHERE mail IN (:entered_email)", array(':entered_email' => $entered_email))->fetchAssoc();
+  if (!$exists['mail']) {
+    form_set_error('email', t('We have no record of users with the email') . ' ' . $form_state['values']['email']);
+    return FALSE;
+  }
+
+  $user_balance = db_query("SELECT * FROM {commerce_funds_account} WHERE uid='" . $user->uid . "' and currency_code ='" . $chosen_currency . "'")->fetchAssoc();
+
+  if ($user_balance['balance'] < intval($form_state['values']['amount'] * 100) or $user_balance['balance'] < ($form_state['values']['amount'] * 100)) {
+     $url = $base_url . t("/user/@user/funds/deposit", array('@user' => $user->uid));
+     form_set_error('amount', t("You don't have enough funds to cover this transfer. Please " . l(t("Deposit Funds"), url($url))));
+    return FALSE;
+  }
+
+  $query = db_select('users', 'user');
+  $query->fields('user', array('uid'));
+  $query->condition('mail', $form_state['values']['email']);
+  $result = $query->execute();
+  foreach ($result as $data) {
+    $uid = $data->uid;
+  }
+
+  $query = db_select('commerce_funds_account', 'user_account');
+  $query->fields('user_account', array('balance'));
+  $query->condition('uid', $uid);
+  $query->condition('currency_code', $chosen_currency);
+  $result = $query->execute();
+  foreach ($result as $data) {
+    $balance = $data->balance;
+  }
+  if (empty($balance)) {
+    $balance = 0;
+  }
+  else {
+    $balance = $balance / 100;
+  }
+  $amount = $form_state['values']['amount'];
+  //$allowed_transfer = 21474836.47 - $balance;
+  $allowed_transfer = 20000000 - $balance;
+  if ( (($amount + $balance ) > 20000000 ) ) {
+    if ($allowed_transfer == 0) {
+      form_set_error('amount', t("The recipient has reached the maximum amount in their account."));
+    }
+    else {
+      form_set_error('amount', t("You can transfer up to @allowed_transfer @chosen_currency", array('@allowed_transfer' => $allowed_transfer, '@chosen_currency' => $chosen_currency)));
+    }
+  }
+
+}
+
+
+
+/**
+ * Submits the form.
+ */
+function commerce_funds_transfer_funds_form_submit($form, &$form_state) {
+
+  global $user;
+  $from_user = $user;
+
+  $to_user = db_query("SELECT * FROM {users} WHERE mail='" . $form_state['values']['email'] . "'")->fetchObject();
+  $exists = db_query("SELECT * FROM {commerce_funds_account} WHERE uid=" . $to_user->uid )->fetchAssoc();
+
+  if (is_numeric($form_state['values']['currency'])) {
+    $form_result_value = $form_state['values']['currency'];
+    $form_state['values']['currency'] = $form_state['complete form']['currency']['#options'][$form_result_value];
+
+    $chosen_currency = $form_state['complete form']['currency']['#options'][$form_result_value];
+    $form_state['complete form']['currency']['#value'] = $chosen_currency;
+    $form_state['input']['currency'] = $chosen_currency;
+  }
+  else{
+    $chosen_currency = $form_state['values']['currency'];
+  }
+
+  if (!$exists) {
+    $user_balance = new stdClass();
+    $user_balance->uid = $to_user->uid;
+    $user_balance->balance = 0;
+    $user_balance->currency_code = $chosen_currency;
+    drupal_write_record('commerce_funds_account', $user_balance);
+  }
+  $fees = variable_get('commerce_funds_fees', array());
+
+  $fee = array_key_exists('transfer', $fees) ? $fees['transfer'] : 0;
+  $fee_fixed = array_key_exists('transfer', $fees) ? $fees['transfer_fixed'] : 0;
+
+  $transfer_amount = intval($form_state['values']['amount'] * 100.0);
+
+  $transfer_after_fee = $transfer_amount * (1.0 - $fee / 100.0);
+  $transfer_after_fee_fixed = $transfer_amount - $fee;
+
+  $amount = $form_state['values']['amount'];
+  $transfer = commerce_funds_transfer_transaction($to_user, $from_user, $amount, $chosen_currency);
+
+  drupal_set_message(t('Transfer Successful'), 'status');
+}
+
+/**
+ * Credit and Debit both of the accounts.
+ */
+function commerce_funds_transfer_transaction($to_user, $from_user, $amount, $currency_code) {
+
+  $account_to = commerce_funds_account_load_by_user($to_user, $currency_code);
+  $account_from = commerce_funds_account_load_by_user($from_user, $currency_code);
+
+  $amount = array(
+    'amount' => $amount,
+    'currency_code' => $currency_code,
+  );
+  $amount['amount'] = $amount['amount'] * 100;
+  if (empty($account_to)) {
+    $to_user->currency_code = $currency_code;
+    $account_to = commerce_funds_account_new($to_user);
+    $account_to->uid = $to_user->uid;
+    $account_to->currency_code = $currency_code;
+  }
+  $amount['reference'] = $from_user->uid;
+  commerce_funds_credit($account_to, $amount);
+  $amount['reference'] = $to_user->uid;
+  commerce_funds_debit($account_from, $amount);
+}
diff --git a/modules/commerce_funds_withdraw/commerce_funds_withdraw.info b/modules/commerce_funds_withdraw/commerce_funds_withdraw.info
new file mode 100755
index 0000000..0d28c2d
--- /dev/null
+++ b/modules/commerce_funds_withdraw/commerce_funds_withdraw.info
@@ -0,0 +1,13 @@
+name =  Commerce Funds Withdraw
+description = Allow users to withdraw funds from thier account
+core = 7.x
+dependencies[] = commerce_funds
+dependencies[] = rules
+dependencies[] = commerce_product
+dependencies[] = commerce_cart
+dependencies[] = commerce_order
+dependencies[] = commerce_checkout
+dependencies[] = commerce_line_item_ui
+dependencies[] = commerce_customer_ui
+
+package = "Commerce Funds"
\ No newline at end of file
diff --git a/modules/commerce_funds_withdraw/commerce_funds_withdraw.install b/modules/commerce_funds_withdraw/commerce_funds_withdraw.install
new file mode 100755
index 0000000..1ad3a88
--- /dev/null
+++ b/modules/commerce_funds_withdraw/commerce_funds_withdraw.install
@@ -0,0 +1,72 @@
+<?php
+
+/**
+ * @file
+ * Install, and uninstall functions for the commerce_funds_withdraw module.
+ */
+
+/**
+ * Implements hook_schema().
+ */
+function commerce_funds_withdraw_schema() {
+
+  $schema['commerce_funds_withdraw_requests'] = array(
+    'description' => 'Withdraw Requests',
+    'fields' => array(
+      'request_id' => array(
+        'description' => '',
+        'type' => 'serial',
+        'not null' => TRUE,
+      ),
+      'uid' => array(
+        'description' => 'the id of the user',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'created' => array(
+        'description' => '',
+        'type' => 'int',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
+      'method' => array(
+        'description' => '',
+        'type' => 'varchar',
+        'length' => 64,
+        'not null' => TRUE,
+        'description' => "",
+      ),
+      'amount' => array(
+        'description' => 'the amount the user wants to withdraw',
+        'type' => 'int',
+        'not null' => TRUE,
+      ),
+      'status' => array(
+        'description' => 'the status of the request',
+        'type' => 'varchar',
+        'length' => 64,
+        'not null' => TRUE,
+        'description' => "",
+      ),
+      'notes' => array(
+        'description' => '',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => FALSE,
+        'description' => "",
+      ),
+    ),
+    'primary key' => array(
+      'request_id'
+    ),
+    'foreign keys' => array(
+      'uid' => array(
+        'table' => 'user',
+        'columns' => array('uid' => 'uid'),
+      ),
+    ),
+  );
+
+  return $schema;
+}
diff --git a/modules/commerce_funds_withdraw/commerce_funds_withdraw.module b/modules/commerce_funds_withdraw/commerce_funds_withdraw.module
new file mode 100755
index 0000000..e2627ca
--- /dev/null
+++ b/modules/commerce_funds_withdraw/commerce_funds_withdraw.module
@@ -0,0 +1,659 @@
+<?php
+/**
+ * @file
+ *   commerce_funds_withdraw.module
+ */
+
+/**
+ * Implements hook_permission().
+ */
+function commerce_funds_withdraw_permission() {
+  return array(
+    'withdraw funds' => array(
+      'title' => 'Withdraw Funds',
+      'description' => 'Allow users to withdraw funds',
+    ),
+    'administer withdraw requests' => array(
+      'title' => 'Administer Withdraw Requests',
+      'description' => 'Allow users to approve/reject withdraw requests',
+    ),
+  );
+}
+
+/**
+ * Implements hook_menu().
+ */
+function commerce_funds_withdraw_menu() {
+
+  $items['admin/commerce/funds/withdrawals/approve/%'] = array(
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_approve_withdrawal_request', 5),
+    'access arguments' => array('view own transactions'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['admin/commerce/funds/withdrawals/decline/%'] = array(
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_decline_withdrawal_request', 5),
+    'access arguments' => array('view own transactions'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['admin/commerce/funds/configure/withdraw-methods'] = array(
+    'title' => 'Withdrawal Methods',
+    'page callback' => 'commerce_funds_configure_withdraw_methods',
+    'access arguments' => array('administer funds'),
+    'type' => MENU_NORMAL_ITEM,
+  );
+
+  $items['user/funds/withdrawals'] = array(
+    'title' => 'Withdrawal requests',
+    'page callback' => 'commerce_funds_get_user_withdrawals',
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/withdraw'] = array(
+    'title' => 'Submit a Withdrawal Request',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_withdraw_funds'),
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/manage/withdrawal-methods'] = array(
+    'title' => 'Configure Withdrawal Methods',
+    'page callback' => 'commerce_funds_manage_withdrawal_methods',
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/manage/withdrawal-methods/paypal'] = array(
+    'title' => 'Configure Paypal',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_manage_withdrawal_method_paypal'),
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/manage/withdrawal-methods/skrill'] = array(
+    'title' => 'Configure Skrill',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_manage_withdrawal_method_skrill'),
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/manage/withdrawal-methods/bank_account'] = array(
+    'title' => 'Configure Bank Account',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_manage_withdrawal_method_bank_account'),
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_CALLBACK,
+  );
+
+  $items['user/funds/manage/withdrawal-methods/check'] = array(
+    'title' => 'Configure Check',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('commerce_funds_manage_withdrawal_method_check'),
+    'access arguments' => array('withdraw funds'),
+    'type' => MENU_LOCAL_TASK,
+  );
+
+  return $items;
+}
+
+function commerce_funds_approve_withdrawal_request($form, &$form_state, $request_id) {
+
+  $form['#$request_id'] = $request_id;
+
+  $request = db_query("SELECT * FROM {commerce_funds_withdraw_requests} WHERE request_id= :request_id", array(':request_id' => $request_id))->fetchAssoc();
+
+  $user = user_load($request['uid']);
+
+  return confirm_form($form, check_plain('Approve Request?'), 'admin/commerce/funds/view-withdraw-requests', check_plain('Are you sure you want to approve the withdrawal request made by ' . $user->mail . '?'), t('Yes'));
+}
+
+function commerce_funds_approve_withdrawal_request_submit($form, &$form_state) {
+
+  $request_id = $form['#$request_id'];
+
+  $fees = variable_get('commerce_funds_fees', array());
+
+  $request = db_query("SELECT * FROM {commerce_funds_withdraw_requests} WHERE request_id= :request_id", array(':request_id' => $request_id))->fetchAssoc();
+
+  $request['status'] = t('Approved');
+
+  $user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $request['uid'])->fetchAssoc();
+  $user_balance['balance'] -= max(array($request['amount'] * (1.0 + $fees[$request['method']] / 100.0), $request['amount'] - $fees[$request['method'] . '_fixed']));
+
+  drupal_write_record('commerce_funds_user_funds', $user_balance, 'uid');
+  drupal_write_record('commerce_funds_withdraw_requests', $request, 'request_id');
+
+  drupal_goto('admin/commerce/funds/view-withdraw-requests');
+}
+
+function commerce_funds_decline_withdrawal_request($form, &$form_state, $request_id) {
+
+  $form['#$request_id'] = $request_id;
+
+  $form['reason'] = array(
+    '#type' => 'textarea',
+    '#title' => t('Reason for Decline'),
+    '#description' => '',
+  );
+
+  $request = db_query("SELECT * FROM {commerce_funds_withdraw_requests} WHERE request_id= :request_id", array(':request_id' => $request_id))->fetchAssoc();
+
+  $user = user_load($request['uid']);
+
+  return confirm_form($form, check_plain('Decline Request?'), 'admin/commerce/funds/view-withdraw-requests', check_plain('Are you sure you want to decline the withdrawal request made by ' . $user->mail . '?'), check_plain('Yes'));
+}
+
+function commerce_funds_decline_withdrawal_request_submit($form, &$form_state) {
+
+  $request_id = $form['#$request_id'];
+
+  $request = db_query("SELECT * FROM {commerce_funds_withdraw_requests} WHERE request_id= :request_id", array(':request_id' => $request_id))->fetchAssoc();
+
+  $request['status'] = t('Declined');
+  $request['notes'] = $form_state['values']['reason'];
+
+  drupal_write_record('commerce_funds_withdraw_requests', $request, 'request_id');
+
+  drupal_goto('admin/commerce/funds/view-withdraw-requests');
+}
+
+function commerce_funds_configure_withdraw_methods() {
+  return drupal_get_form('commerce_funds_configure_withdraw_methods_form');
+}
+
+function commerce_funds_configure_withdraw_methods_form($form, &$form_state) {
+
+  $methods = commerce_funds_get_withdrawal_methods();
+
+  $values = variable_get('commerce_funds_withdrawal_methods', array());
+
+  $form['methods'] = array(
+    '#type' => 'checkboxes',
+    '#options' => $methods,
+    '#default_value' => $values,
+    '#title' => t('Choose Payment methods allowed for withdrawals'),
+    '#required' => TRUE,
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save Configurations'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_configure_withdraw_methods_form_submit($form, &$form_state) {
+  variable_set('commerce_funds_withdrawal_methods', $form_state['values']['methods']);
+}
+
+function commerce_funds_manage_withdrawal_methods() {
+
+  $methods = commerce_funds_get_enabled_withdrawal_methods();
+
+  foreach ($methods as $key => $value) {
+    $methods[$key] = l($methods[$key], 'user/funds/manage/withdrawal-methods/' . $key);
+  }
+
+  return theme('item_list', array('items' => $methods, 'type' => 'ul'));
+}
+
+function commerce_funds_manage_withdrawal_method_paypal($form, &$form_state) {
+
+  $enabled_methods = variable_get('commerce_funds_withdrawal_methods', array());
+
+  if (!$enabled_methods['paypal'])
+    return FALSE;
+
+  global $user;
+
+  $form['paypal_email'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Paypal Email'),
+    '#description' => t('Withdrawals using Paypal will be sent to this email'),
+    '#default_value' => $user->data && array_key_exists('paypal', $user->data) ? $user->data['paypal']['paypal_email'] : '',
+    '#size' => 40,
+    '#maxlength' => 64,
+    '#required' => TRUE,
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_manage_withdrawal_method_paypal_submit($form, &$form_state) {
+
+  global $user;
+
+  user_save($user, array('data' => array('paypal' => $form_state['values'])));
+}
+
+function commerce_funds_manage_withdrawal_method_skrill($form, &$form_state) {
+
+  $enabled_methods = variable_get('commerce_funds_withdrawal_methods', array());
+
+  if (!$enabled_methods['skrill'])
+    return FALSE;
+
+  global $user;
+
+  $form['skrill_email'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Skrill Email'),
+    '#description' => t('Withdrawals using Skrill will be sent to this email'),
+    '#default_value' => $user->data && array_key_exists('skrill', $user->data) ? $user->data['skrill']['skrill_email'] : '',
+    '#size' => 40,
+    '#maxlength' => 64,
+    '#required' => TRUE,
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_manage_withdrawal_method_skrill_submit($form, &$form_state) {
+
+  global $user;
+
+  user_save($user, array('data' => array('skrill' => $form_state['values'])));
+}
+
+function commerce_funds_manage_withdrawal_method_bank_account($form, &$form_state) {
+
+  include_once DRUPAL_ROOT . '/includes/locale.inc';
+
+  $enabled_methods = variable_get('commerce_funds_withdrawal_methods', array());
+
+  if (!$enabled_methods['bank_account'])
+    return FALSE;
+
+  global $user;
+
+  $form['account_name'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Name of Account Holder'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['account_name'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['account_number'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Account Number / IBAN'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['account_number'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['bank_name'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Bank Name'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_name'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['bank_country'] = array(
+    '#type' => 'select',
+    '#title' => t('Bank Country'),
+    '#options' => country_get_list(),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_country'] : '',
+    '#description' => t(''),
+    '#required' => TRUE,
+  );
+
+  $form['swift_code'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Swift Code'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['swift_code'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['bank_address'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Bank Address'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_address'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['bank_address2'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Bank Address 2'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_address2'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+  );
+
+  $form['bank_city'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Bank City'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_city'] : '',
+    '#size' => 20,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['bank_province'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Bank Province'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_province'] : '',
+    '#size' => 20,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['bank_postalcode'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Bank Postal Code'),
+    '#description' => t(''),
+    '#default_value' => $user->data && array_key_exists('bank_account', $user->data) ? $user->data['bank_account']['bank_postalcode'] : '',
+    '#size' => 20,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_manage_withdrawal_method_bank_account_submit($form, &$form_state) {
+
+  global $user;
+
+  user_save($user, array('data' => array('bank_account' => $form_state['values'])));
+}
+
+function commerce_funds_manage_withdrawal_method_check($form, &$form_state) {
+
+  $enabled_methods = variable_get('commerce_funds_withdrawal_methods', array());
+
+  if (!$enabled_methods['check'])
+    return FALSE;
+
+  global $user;
+
+  $form['check_name'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Full Name'),
+    '#description' => t('Full Name to write the Check to'),
+    '#default_value' => $user->data && array_key_exists('check', $user->data) ? $user->data['check']['check_name'] : '',
+    '#size' => 40,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['check_address'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Address'),
+    '#description' => t('Detailed address to send the check to'),
+    '#default_value' => $user->data && array_key_exists('check', $user->data) ? $user->data['check']['check_address'] : '',
+    '#size' => 60,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['check_address2'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Address 2'),
+    '#description' => t('Detailed address to send the check to'),
+    '#default_value' => $user->data && array_key_exists('check', $user->data) ? $user->data['check']['check_address2'] : '',
+    '#size' => 60,
+    '#maxlength' => 128,
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_manage_withdrawal_method_check_submit($form, &$form_state) {
+
+  global $user;
+
+  user_save($user, array('data' => array('check' => $form_state['values'])));
+}
+
+function commerce_funds_get_enabled_withdrawal_methods() {
+
+  $methods = commerce_funds_get_withdrawal_methods();
+
+  $enabled_methods = variable_get('commerce_funds_withdrawal_methods', array());
+
+  foreach ($enabled_methods as $key => $value) {
+    if (!$value)
+      unset($methods[$key]);
+  }
+
+  return $methods;
+}
+
+function commerce_funds_get_withdrawal_methods() {
+
+  $methods = array(
+    'paypal' => 'Paypal',
+    'skrill' => 'Skrill',
+    'bank_account' => 'Bank Account',
+    'check' => 'Check'
+  );
+
+  return $methods;
+}
+
+function commerce_funds_view_withdrawal_requests($form, &$form_state) {
+
+  $requests = db_query("SELECT * FROM {commerce_funds_withdraw_requests}");
+
+  $header = array('Time', 'User', 'Method', 'Amount', 'Request Status', 'Operations');
+
+  $status = array(
+    'Pending Approval', 'Approved', 'Declined'
+  );
+
+  $saved_status = array();
+
+  if (array_key_exists('commerce_funds_filter_status', $_SESSION)) {
+    foreach ($_SESSION['commerce_funds_filter_status'] as $index) {
+      $saved_status[] = $status[$index];
+    }
+  }
+
+
+  $rows = array();
+
+  foreach ($requests as $request) {
+    if ((array_key_exists('commerce_funds_filter_status', $_SESSION) && in_array($request->status, $saved_status)) || !array_key_exists('commerce_funds_filter_status', $_SESSION)) {
+      if ((array_key_exists('commerce_funds_filter_method', $_SESSION) && in_array($request->method, $_SESSION['commerce_funds_filter_method'])) || !array_key_exists('commerce_funds_filter_method', $_SESSION)) {
+        $user = user_load($request->uid);
+        $rows[] = array(date('d/m/Y   g:i:s A', $request->created), $user->name, $request->method, commerce_currency_format($request->amount, commerce_default_currency()), $request->status == 'Declined' ? $request->status . '<br /><br />Reason: ' . $request->notes : $request->status, '<ul><li>' . l(t('Approve'), 'admin/commerce/funds/withdrawals/approve/' . $request->request_id) . '</li><li>' . l(t('Decline'), 'admin/commerce/funds/withdrawals/decline/' . $request->request_id) . '</li>');
+      }
+    }
+  }
+
+  $form['filter_method'] = array(
+    '#type' => 'select',
+    '#title' => t('Method'),
+    '#options' => commerce_funds_get_enabled_withdrawal_methods(),
+    '#attributes' => array('multiple' => TRUE),
+    '#multiple' => TRUE,
+    '#size' => count(commerce_funds_get_enabled_withdrawal_methods()),
+    '#default_value' => array_key_exists('commerce_funds_filter_method', $_SESSION) ? $_SESSION['commerce_funds_filter_method'] : '',
+  );
+
+  $form['filter_status'] = array(
+    '#type' => 'select',
+    '#title' => t('Status'),
+    '#options' => $status,
+    '#attributes' => array('multiple' => TRUE),
+    '#multiple' => TRUE,
+    '#size' => 3,
+    '#default_value' => array_key_exists('commerce_funds_filter_status', $_SESSION) ? $_SESSION['commerce_funds_filter_status'] : '',
+  );
+
+  $form['filter'] = array(
+    '#type' => 'submit',
+    '#value' => t('Filter'),
+  );
+
+  $form['reset'] = array(
+    '#type' => 'submit',
+    '#value' => t('Reset'),
+    '#suffix' => theme('table', array('header' => $header, 'rows' => $rows))
+  );
+
+  return $form;
+}
+
+function commerce_funds_view_withdrawal_requests_submit($form, &$form_state) {
+  if ($form_state['values']['op'] == 'Filter') {
+    if (!empty($form_state['values']['filter_status']))
+      $_SESSION['commerce_funds_filter_status'] = $form_state['values']['filter_status']; else {
+      unset($_SESSION['commerce_funds_filter_status']);
+    }
+    if (!empty($form_state['values']['filter_method']))
+      $_SESSION['commerce_funds_filter_method'] = $form_state['values']['filter_method']; else {
+      unset($_SESSION['commerce_funds_filter_method']);
+    }
+  }
+  elseif ($form_state['values']['op'] == 'Reset') {
+    unset($_SESSION['commerce_funds_filter_status']);
+    unset($_SESSION['commerce_funds_filter_method']);
+  }
+
+  $form_state['redirect'] = 'admin/commerce/funds/view-withdraw-requests';
+}
+
+function commerce_funds_withdraw_funds($form, &$form_state) {
+
+  $methods = commerce_funds_get_enabled_withdrawal_methods();
+
+  $fees = variable_get('commerce_funds_fees', array());
+
+  foreach ($methods as $key => $method) {
+    if (array_key_exists($key, $fees)) {
+      $methods[$key] = $method . ' (' . $fees[$key] . '% Fee)';
+    }
+  }
+
+  $form['amount'] = array(
+    '#type' => 'textfield',
+    '#title' => t('Amount to withdraw (' . commerce_default_currency() . ')'),
+    '#description' => t('Please enter the amount you wish to withdraw in ' . commerce_default_currency()),
+    '#default_value' => '',
+    '#size' => 30,
+    '#maxlength' => 128,
+    '#required' => TRUE,
+  );
+
+  $form['methods'] = array(
+    '#type' => 'radios',
+    '#options' => $methods,
+    '#title' => t('Choose a Withdrawal method'),
+    '#default_value' => '',
+    '#required' => TRUE,
+  );
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Submit Request'),
+  );
+
+  return $form;
+}
+
+function commerce_funds_withdraw_funds_validate($form, &$form_state) {
+
+  global $user;
+
+  $fees = variable_get('commerce_funds_fees', array());
+
+  $user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $user->uid)->fetchAssoc();
+
+  if (!is_numeric($form_state['values']['amount'])) {
+    form_set_error('amount', t('Value must be Numeric'));
+    return FALSE;
+  }
+
+  if ($form_state['values']['amount'] * 100 > $user_balance['balance']) {
+    form_set_error('amount', t('Your available balance is') . ' ' . commerce_currency_format($user_balance['balance'], commerce_default_currency()));
+    return FALSE;
+  }
+
+  if (is_numeric($form_state['values']['amount']) && !(floatval($form_state['values']['amount']) > 0)) {
+    form_set_error('amount', t('Value must be greater than 0'));
+    return FALSE;
+  }
+
+  if (!$user->data || !array_key_exists($form_state['values']['methods'], $user->data)) {
+    form_set_error('methods', t('Please') . ' ' . l(t('Enter Details'), 'user/funds/manage/withdrawal-methods/' . $form_state['values']['methods']) . ' ' . t('for this withdrawal method first'));
+    return FALSE;
+  }
+
+  if (array_key_exists($form_state['values']['methods'], $fees)) {
+
+    $amount_plus_fees = max(array((1.0 + $fees[$form_state['values']['methods']] / 100.0) * $form_state['values']['amount'] * 100, ($form_state['values']['amount'] * 100) + $fees[$form_state['values']['methods'] . '_fixed']));
+
+    if ($amount_plus_fees > $user_balance['balance']) {
+      form_set_error('amount', t('You cannot withdraw more than') . ' ' . commerce_currency_format(min(array($user_balance['balance'] * (1 - $fees[$form_state['values']['methods']] / 100.0), $user_balance['balance'] - $fees[$form_state['values']['methods'] . '_fixed'])), commerce_default_currency()) . ' ' . t('using this method'));
+      return FALSE;
+    }
+  }
+}
+
+function commerce_funds_withdraw_funds_submit($form, &$form_state) {
+  global $user;
+
+  $request = new stdClass();
+  $request->uid = $user->uid;
+  $request->created = time();
+  $request->method = $form_state['values']['methods'];
+  $request->amount = $form_state['values']['amount'] * 100;
+  $request->status = 'Pending Approval';
+
+  drupal_write_record('commerce_funds_withdraw_requests', $request);
+
+  drupal_set_message(t('Your Withdrawal Request has been sent and will be processed in due order'), 'status');
+
+  drupal_goto('user');
+}
+
+function commerce_funds_get_user_withdrawals() {
+  global $user;
+  return theme('account_withdrawals', array('uid' => $user->uid));
+}
diff --git a/modules/commerce_funds_withdraw/includes/views/commerce_funds_withdraw.views.inc b/modules/commerce_funds_withdraw/includes/views/commerce_funds_withdraw.views.inc
new file mode 100755
index 0000000..921f12b
--- /dev/null
+++ b/modules/commerce_funds_withdraw/includes/views/commerce_funds_withdraw.views.inc
@@ -0,0 +1,134 @@
+<?php
+
+<?php
+/**
+ * @file
+*   commerce_funds.views.inc
+*/
+
+/**
+ * Impliments hook_views_data().
+*/
+function commerce_funds_withdraw_views_data() {
+  $data = array();
+
+  $data['commerce_funds_withdraw_requests']['table'] = array(
+    'group' => t("Withdraw Requests"),
+    'title' => t("Withdraw Requests"),
+    'help' => t(""),
+  );
+  $data['commerce_funds_withdraw_requests']['table']['base'] = array(
+    'field' => 'request_id',
+    'title' => 'Withdraw Requests',
+    'help' => t(""),
+    'weight' => 10,
+  );
+
+  $data['commerce_funds_withdraw_requests']['uid'] = array(
+    'title' => t('User Uid'),
+    'help' => t('The user ID.'),
+    'relationship' => array(
+      'base' => 'users',
+      'field' => 'uid',
+      'handler' => 'views_handler_relationship',
+      'label' => t('User ID'),
+    ),
+    'field' => array(
+      'handler' => 'views_handler_field_numeric',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_user_current',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  $data['commerce_funds_withdraw_requests']['created'] = array(
+    'title' => t('Created On'),
+    'help' => t('Time of creation.'),
+    'field' => array(
+      'handler' => 'views_handler_field_date',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_field_date',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  $data['commerce_funds_withdraw_requests']['method'] = array(
+    'title' => t('Withdraw Method'),
+    'help' => t('The Withdraw Method.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_string',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+  $data['commerce_funds_withdraw_requests']['amount'] = array(
+    'title' => t('Withdraw Amount'),
+    'help' => t('The Amount of withdraw.'),
+    'field' => array(
+      'handler' => 'views_handler_field_numeric',
+      'click sortable' => TRUE,
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_numeric',
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+  );
+
+  $data['commerce_funds_withdraw_requests']['status'] = array(
+    'title' => t('Withdraw Status'),
+    'help' => t('Withdraw Status.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'filter' => array(
+      'handler' => 'commerce_funds_status_views_handler_filter_in_operator',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+  $data['commerce_funds_withdraw_requests']['notes'] = array(
+    'title' => t('Notes'),
+    'help' => t('Comments.'),
+    'field' => array(
+      'handler' => 'views_handler_field',
+      'click sortable' => TRUE,
+    ),
+    'sort' => array(
+      'handler' => 'views_handler_sort',
+    ),
+    'filter' => array(
+      'handler' => 'views_handler_filter_string',
+    ),
+    'argument' => array(
+      'handler' => 'views_handler_argument_string',
+    ),
+  );
+
+
+  return $data;
+}
-- 
1.8.4

