<?php
/**
 * @file
 *   commerce_funds.module
 */

/**
 *  Implementation of hook_views_api().
 */
function commerce_funds_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_funds') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function commerce_funds_permission() {
  return array(
    'view own transactions' => array(
      'title' => 'View Own Transactions',
      'description' => 'Allow users to view their transactions',
    ),
    'view transactions' => array(
      'title' => 'View All Transactions',
      'description' => 'Allow users to view all transactions',
    ),
    'administer funds' => array(
      'title' => 'Administer Funds',
      'description' => 'Gives users permission to administer all funds operations',
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_funds_menu() {

  $items['admin/commerce/funds'] = array(
    'title' => 'Funds Management',
    'description' => 'Administer Store Funds',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -15,
  );

  $items['admin/commerce/config/funds'] = array(
    'title' => 'Funds',
    'description' => 'Configure Funds Settings',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer funds'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -15,
  );

  $items['user/%user/funds'] = array(
    'title' => 'Funds Account',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements of hook_entity_info().
 */
function commerce_funds_entity_info() {
  $data = array();

  $data['commerce_funds_account'] = array(
    'label' => t('Commerce Funds account'),
    'plural label' => t('Commerce Funds accounts'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'commerce_funds_account',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'account_id',
      'label' => 'account_id',
    ),
    'bundles' => array(),
    'load hook' => 'commerce_funds_account_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Administrator'),
        'custom settings' => FALSE,
      ),
    ),
    'uri callback' => 'commerce_funds_account_uri',
    'access callback' => 'commerce_funds_account_access',
    'token type' => 'commerce-funds-account',
    'metadata controller class' => '',
    'permission labels' => array(
      'singular' => t('funds account'),
      'plural' => t('funds accounts'),
    ),
  );

  $data['commerce_funds_transaction'] = array(
    'label' => t('Commerce Funds transaction'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'commerce_funds_transaction',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'transaction_id',
      'bundle' => 'type',
      'label' => 'transaction_id',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'credit' => array(
        'label' => 'Credit',
      ),
      'debit' => array(
        'label' => 'Debit',
      ),
    ),
    'load hook' => 'commerce_funds_transaction_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Administrator'),
        'custom settings' => FALSE,
      ),
    ),
    'uri callback' => 'commerce_funds_transaction_uri',
    'access callback' => 'commerce_funds_transaction_access',
    'token type' => 'commerce-funds-transaction',
    'metadata controller class' => '',
    'permission labels' => array(
      'singular' => t('funds transaction'),
      'plural' => t('funds transactions'),
    ),
  );

  return $data;
}

/**
 * Access callback for the entity API.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $profile
 *   (optional) A profile to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param $account
 *   (optional) The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   Whether access is allowed or not.
 */
function commerce_funds_account($op, $profile = NULL, $account = NULL) {
    return user_access('administer commerce_funds entities', $account);
  }

/**
 * Returns an initialized funds account object.
 *
 * @return
 *   A transaction object with all default fields initialized.
 */
function commerce_funds_account_new($account_user, $currency_code) {
  return entity_get_controller('commerce_funds_account')->create(array(
    'uid' => $account_user->uid,
    'currency_code' => $currency_code,
  ));
}

/**
 * Saves a funds account.
 *
 * @param object $account
 *   The full transaction object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_funds_account_save($account) {
  return entity_get_controller('commerce_funds_account')->save($account);
}

/**
 * Loads a funds account by ID.
 */
function commerce_funds_account_load($account_id, $conditions) {
  $accounts = entity_load('commerce_funds_account', $account_id, $conditions);
  return $accounts ? reset($accounts) : FALSE;
}

/**
 * Loads multiple funds accounts by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 */
function commerce_funds_account_load_by_user($account_user, $currency_code, $reset = FALSE) {
  $accounts =  entity_load('commerce_funds_account', array(), array('uid' => $account_user->uid, 'currency_code' => $currency_code), $reset);
  return $accounts ? reset($accounts) : FALSE;
}

/**
 * Returns an initialized payment transaction object.
 *
 * @param $method_id
 *   The method_id of the payment method for the transaction.
 *
 * @return
 *   A transaction object with all default fields initialized.
 */
function commerce_funds_transaction_new($type = '') {
  return entity_get_controller('commerce_funds_transaction')->create(array(
    'type' => $type,
  ));
}

/**
 * Saves a funds transaction.
 *
 * @param $transaction
 *   The full transaction object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_funds_transaction_save($transaction) {
  return entity_get_controller('commerce_funds_transaction')->save($transaction);
}

/**
 * Loads a funds transaction by ID.
 */
function commerce_funds_transaction_load($transaction_id) {
  $transactions = commerce_funds_transaction_load_multiple(array($transaction_id), array());
  return $transactions ? reset($transactions) : FALSE;
}

/**
 * Loads multiple funds transaction by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $transaction_ids
 *   An array of transaction IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_payment_transaction} table in the
 *     form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal transaction loading cache.
 *
 * @return
 *   An array of transaction objects indexed by transaction_id.
 */
function commerce_funds_transaction_load_multiple($transaction_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_funds_transaction', $transaction_ids, $conditions, $reset);
}

 /**
  * View callback
  */
function commerce_funds_view($commerce_funds, $view_mode) {
  return entity_view('commerce_funds', array($commerce_funds->id => $commerce_funds), $view_mode, NULL, TRUE);
}

/**
 * Deletes a funds transaction by ID.
 *
 * @param $transaction_id
 *   The ID of the transaction to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_funds_transaction_delete($transaction_id) {
  return commerce_funds_transaction_delete_multiple(array($transaction_id));
}

/**
 * Deletes multiple funds transactions by ID.
 *
 * @param $transaction_ids
 *   An array of transaction IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_funds_transaction_delete_multiple($transaction_ids) {
  return entity_get_controller('commerce_funds_transaction')->delete($transaction_ids);
}

/**
 * Rules action to credit account balance
 *
 * @param object $account_user
 *   User
 * @param object $amount
 *   Commerce Price
 */
function commerce_funds_credit($account_user, $amount) {

  $account = commerce_funds_account_load_by_user($account_user, $amount['currency_code']);
  $currency_code = $amount['currency_code'];
  if (empty($account)) {
    ddebug_backtrace($account_user);
    $account = commerce_funds_account_new($account_user, $currency_code);
    commerce_funds_account_save($account);
  }



  $account->balance += $amount['amount'];
  $account->currency_code = $amount['currency_code'];

  $transaction = commerce_funds_transaction_new('credit');
  $transaction->account_id = $account->account_id;

  $transaction->uid = $account_user->uid;
  if (empty($amount['reference'])) {
    $transaction->reference = $account_user->uid;
  }
  else {
    $transaction->reference = $amount['reference'];
  }
  $transaction->amount = $amount['amount'];
  $transaction->currency_code = $amount['currency_code'];

  if (commerce_funds_transaction_save($transaction)) {
    commerce_funds_account_save($account);
  }
}

/**
 * Rules action to debit account balance
 *
 * @param object $account_user
 *   User
 * @param object $amount
 *   Commerce Price
 */
function commerce_funds_debit($account_user, $amount) {

  $account = commerce_funds_account_load_by_user($account_user, $amount['currency_code']);

  if (!$account) {
    $account = commerce_funds_account_new($account_user);
    commerce_funds_account_save($account);
  }

  $account->balance -= $amount['amount'];

  $transaction = commerce_funds_transaction_new('debit');
  $transaction->account_id = $account->account_id;
  $transaction->amount = - $amount['amount'];
  $transaction->type = 'debit';
  $transaction->currency_code = $amount['currency_code'];

  if (empty($amount['reference'])) {
    $transaction->reference = $account_user->uid;
  }
  else {
    $transaction->reference = $amount['reference'];
  }

    if (commerce_funds_transaction_save($transaction)) {

      commerce_funds_account_save($account);
    }

}
