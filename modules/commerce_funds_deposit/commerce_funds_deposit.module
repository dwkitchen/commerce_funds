<?php
/**
 * @file
 *   commerce_funds_depost.module
 */

/**
 * Implements hook_permission().
 */
function commerce_funds_deposit_permission() {
  return array(
    'deposit funds' => array(
      'title' => t('Deposit Funds'),
      'description' => 'Allow users to deposit funds',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_funds_deposit_menu() {

  $items['user/funds/deposit'] = array(
    'title' => 'Deposit Funds',
    'page callback' => 'commerce_funds_deposit_funds',
    'access arguments' => array('deposit funds'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function commerce_funds_deposit_commerce_product_type_info() {

  return array(
    'deposit' => array(
      'type' => 'deposit',
      'name' => 'Funds Deposit',
      'description' => 'Stores a Funds Deposit Operation',
      'help' => '',
      'revision' => 1
    )
  );
}

/**
 * Loads commerce_funds_deposit_funds_form().
 */
function commerce_funds_deposit_funds() {
  return drupal_get_form('commerce_funds_deposit_funds_form');
}

/**
 * Implements hook_form().
 */
function commerce_funds_deposit_funds_form($form, &$form_state) {

    $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Deposit Funds'),
    '#description' => t('Please enter the amount you wish to deposit in ' . commerce_default_currency() . ' or select any other currency'),
    '#default_value' => '',
    '#size' => 30,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $currencies = variable_get('commerce_enabled_currencies');
  $enabled_currencies = array();
  foreach ($currencies as $k => $v) {
    if ($v !== 0 and !empty($v)) {
      $enabled_currencies[] = $v;
    }
  }

  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' =>  $enabled_currencies,
    '#default_value' => commerce_default_currency(),
    '#description' => t('Select desire currency'),
  );

  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#description' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Deposit Funds'),
  );

  return $form;
}

/**
 * Validate the form.
 */
function commerce_funds_deposit_funds_form_validate($form, &$form_state) {

  if (!is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('Value must be Numeric'));
    return FALSE;
  }

  if (is_numeric($form_state['values']['amount']) && !(floatval($form_state['values']['amount']) > 0)) {
    form_set_error('amount', t('Value must be greater than 0'));
    return FALSE;
  }


}

/**
 * Submits the form.
 */
function commerce_funds_deposit_funds_form_submit($form, &$form_state) {

  global $user;

  if (is_numeric($form_state['values']['currency'])) {
    $form_result_value = $form_state['values']['currency'];
    $form_state['values']['currency'] = $form_state['complete form']['currency']['#options'][$form_result_value];

    $chosen_currency = $form_state['complete form']['currency']['#options'][$form_result_value];
    $form_state['complete form']['currency']['#value'] = $chosen_currency;
    $form_state['input']['currency'] = $chosen_currency;
  }

  $deposit = commerce_product_new('deposit');

  $deposit->uid = $user->uid;
  $deposit->sku = 'deposit_' . $user->uid . '_' . $form_state['values']['amount'] . '_' . microtime();

  $deposit->commerce_price['und'][0]['amount'] = $form_state['values']['amount'] * 100.0;

  //$deposit->commerce_price['und'][0]['currency_code'] = commerce_default_currency();
  $deposit->commerce_price['und'][0]['currency_code'] = $chosen_currency;
  $_SESSION['currency'] = $chosen_currency;


  //$deposit->title = 'Deposit ' . commerce_currency_format($form_state['values']['amount'] * 100.0, commerce_default_currency());
  $deposit->title = 'Deposit ' . commerce_currency_format($form_state['values']['amount'] * 100.0, $chosen_currency);

  commerce_product_save($deposit);

  $deposit_order = ($user->uid) ? commerce_order_new($user->uid, 'checkout_checkout') : commerce_cart_order_new();

  $line_item = commerce_product_line_item_new($deposit, 1, $deposit_order->order_id);

  commerce_line_item_save($line_item);

  $order_wrapper = entity_metadata_wrapper('commerce_order', $deposit_order);

  $order_wrapper->commerce_line_items[] = $line_item;


  $deposit_order->data['type'] = 'commerce_funds_deposit';
  $deposit_order->data['notes'] = $form_state['values']['notes'];

  commerce_order_save($deposit_order);

  drupal_goto('checkout/' . $deposit_order->order_id);
}
