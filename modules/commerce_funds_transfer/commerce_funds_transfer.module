<?php
/**
 * @file
 *   commerce_funds_transfer.module
 */

/**
 * Implements hook_permission().
 */
function commerce_funds_transfer_permission() {
  return array(
    'transfer funds' => array(
      'title' => 'Transfer Funds',
      'description' => 'Allow users to transfer funds',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_funds_transfer_menu() {

  $items['user/funds/transfer'] = array(
    'title' => 'Transfer Funds',
    'page callback' => 'commerce_funds_transfer_funds',
    'access arguments' => array('transfer funds'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}



function commerce_funds_transfer_funds() {
  return drupal_get_form('commerce_funds_transfer_funds_form');
}

function commerce_funds_transfer_funds_form($form, &$form_state) {

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount to transfer (' . commerce_default_currency() . ')'),
    '#description' => t('Please enter the amount you wish to transfer in ' . commerce_default_currency()),
    '#default_value' => '',
    '#size' => 30,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Transfer To'),
    '#description' => t('Please enter the email of the user you want to transfer the funds to'),
    '#default_value' => '',
    '#size' => 30,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#description' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Transfer Funds'),
  );

  return $form;
}

function commerce_funds_transfer_funds_form_validate($form, &$form_state) {

  global $user;

  if (!is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('Value must be Numeric'));
    return FALSE;
  }

  if (is_numeric($form_state['values']['amount']) && !(floatval($form_state['values']['amount']) > 0)) {
    form_set_error('amount', t('Value must be greater than 0'));
    return FALSE;
  }

  if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', t('Please enter a valid email'));
    return FALSE;
  }

  $exists = db_query("SELECT * FROM {users} WHERE mail='" . $form_state['values']['email'] . "'")->fetchAssoc();

  if (!$exists) {
    form_set_error('email', t('We have no record of users with the email') . ' ' . $form_state['values']['email']);
    return FALSE;
  }

  $user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $user->uid)->fetchAssoc();

  if ($user_balance['balance'] < intval($form_state['values']['amount'] * 100)) {
    form_set_error('amount', t("You don't have enough funds to cover this transfer"));
    return FALSE;
  }
}

function commerce_funds_transfer_funds_form_submit($form, &$form_state) {

  global $user;

  $from_user = $user;
  $to_user = db_query("SELECT * FROM {users} WHERE mail='" . $form_state['values']['email'] . "'")->fetchAssoc();

  $fees = variable_get('commerce_funds_fees', array());

  $fee = array_key_exists('transfer', $fees) ? $fees['transfer'] : 0;
  $fee_fixed = array_key_exists('transfer', $fees) ? $fees['transfer_fixed'] : 0;

  $transfer_amount = intval($form_state['values']['amount'] * 100.0);

  $transfer_after_fee = $transfer_amount * (1.0 - $fee / 100.0);
  $transfer_after_fee_fixed = $transfer_amount - $fee;

  $transaction = new stdClass();

  $transaction->uid = $from_user->uid;
  $transaction->type = 'Transfer';
  $transaction->reference = $to_user['uid'];
  $transaction->created = time();
  $transaction->amount = $transfer_amount;
  $transaction->notes = $form_state['values']['notes'];

  $from_user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $from_user->uid)->fetchAssoc();
  $from_user_balance['balance'] -= $transfer_amount;

  $exists = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $to_user['uid'])->fetchAssoc();

  if (!$exists) {
    $user_balance = new stdClass();
    $user_balance->uid = $to_user['uid'];
    $user_balance->balance = 0;
    drupal_write_record('commerce_funds_user_funds', $user_balance);
  }

  $to_user_balance = db_query("SELECT * FROM {commerce_funds_user_funds} WHERE uid=" . $to_user['uid'])->fetchAssoc();
  $to_user_balance['balance'] += min(array($transfer_after_fee, $transfer_after_fee_fixed));

  drupal_write_record('commerce_funds_user_funds', $from_user_balance, 'uid');
  drupal_write_record('commerce_funds_user_funds', $to_user_balance, 'uid');
  drupal_write_record('commerce_funds_transactions', $transaction);

  drupal_set_message(t('Transfer Successful'), 'status');
}
